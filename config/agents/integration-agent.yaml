metadata:
  name: integration-agent-configuration
  version: 1.0.0
  description: "AI agent specialized in system integration, API management, and data flow orchestration for HUGAI applications"
  category: specialized-agents
  dependencies:
    - llm-models
    - integration-platforms
    - api-management-tools
    - data-orchestration-systems
  tags:
    - system-integration
    - api-management
    - data-flow
    - microservices
    - enterprise-integration

configuration:
  # Integration Agent Philosophy
  agent_philosophy:
    purpose: "Design, implement, and manage robust system integrations that enable seamless data flow and communication between HUGAI components and external systems"
    principles:
      loosely_coupled_architecture: "Design integrations that minimize dependencies and maximize flexibility"
      fault_tolerant_integration: "Implement resilient integration patterns that gracefully handle failures"
      scalable_data_flow: "Ensure integration solutions scale with system growth and data volume"
      security_first_integration: "Prioritize security in all integration designs and implementations"
      observable_integration: "Provide comprehensive monitoring and tracing for all integration points"

  # Core Capabilities
  core_capabilities:
    integration_patterns:
      messaging_patterns:
        point_to_point:
          description: "Direct communication between two systems"
          use_cases:
            - "simple_data_transfer"
            - "synchronous_api_calls"
            - "real_time_notifications"
          
          implementation_guidance:
            - "use_for_low_latency_requirements"
            - "implement_circuit_breaker_pattern"
            - "add_retry_mechanisms"
            - "monitor_connection_health"
        
        publish_subscribe:
          description: "Event-driven communication with multiple consumers"
          use_cases:
            - "event_notifications"
            - "data_broadcasting"
            - "decoupled_system_communication"
          
          implementation_guidance:
            - "design_event_schemas_carefully"
            - "implement_dead_letter_queues"
            - "use_topic_based_routing"
            - "ensure_message_ordering_if_required"
        
        request_reply:
          description: "Synchronous request-response communication"
          use_cases:
            - "data_queries"
            - "command_execution"
            - "real_time_data_retrieval"
          
          implementation_guidance:
            - "implement_timeout_handling"
            - "use_correlation_ids"
            - "cache_frequently_requested_data"
            - "implement_rate_limiting"
      
      integration_styles:
        api_gateway:
          description: "Centralized API management and routing"
          capabilities:
            - "request_routing"
            - "authentication_authorization"
            - "rate_limiting"
            - "api_versioning"
            - "request_response_transformation"
            - "monitoring_analytics"
          
          recommended_tools:
            - "kong"
            - "aws_api_gateway"
            - "nginx_plus"
            - "zuul"
            - "envoy_proxy"
        
        enterprise_service_bus:
          description: "Centralized integration hub for enterprise systems"
          capabilities:
            - "message_routing"
            - "protocol_transformation"
            - "data_transformation"
            - "workflow_orchestration"
            - "service_registry"
          
          recommended_tools:
            - "apache_camel"
            - "mulesoft_anypoint"
            - "tibco_businessworks"
            - "wso2_enterprise_integrator"
        
        microservices_mesh:
          description: "Service-to-service communication in microservices architecture"
          capabilities:
            - "service_discovery"
            - "load_balancing"
            - "circuit_breaking"
            - "distributed_tracing"
            - "security_policy_enforcement"
          
          recommended_tools:
            - "istio"
            - "linkerd"
            - "consul_connect"
            - "envoy_mesh"
    
    data_integration:
      data_flow_patterns:
        extract_transform_load:
          description: "Traditional batch data processing pattern"
          phases:
            extract:
              - "data_source_identification"
              - "data_extraction_scheduling"
              - "connection_management"
              - "error_handling"
            
            transform:
              - "data_cleansing"
              - "format_conversion"
              - "business_rule_application"
              - "data_validation"
            
            load:
              - "target_system_preparation"
              - "data_loading_optimization"
              - "integrity_verification"
              - "loading_status_reporting"
        
        extract_load_transform:
          description: "Modern cloud-native data processing pattern"
          advantages:
            - "faster_data_availability"
            - "schema_flexibility"
            - "cloud_native_optimization"
            - "real_time_processing_capability"
        
        change_data_capture:
          description: "Real-time data synchronization pattern"
          implementation_approaches:
            - "database_log_based_capture"
            - "trigger_based_capture"
            - "timestamp_based_capture"
            - "version_based_capture"
      
      data_transformation:
        schema_mapping:
          - "source_target_schema_analysis"
          - "field_level_mapping_definition"
          - "data_type_conversion_rules"
          - "complex_transformation_logic"
        
        data_quality_management:
          - "data_profiling"
          - "quality_rule_definition"
          - "validation_checkpoint_implementation"
          - "data_quality_reporting"

  # Agent Configuration
  agent_configuration:
    model_selection:
      primary_model: "claude-3-5-sonnet"
      fallback_models: ["gpt-4-turbo", "gpt-4"]
      
      task_specific_models:
        integration_design: "claude-3-5-sonnet"
        api_specification: "gpt-4-turbo"
        data_mapping: "claude-3-5-sonnet"
        troubleshooting: "gpt-4"
    
    operational_parameters:
      integration_analysis_depth: "comprehensive"
      performance_optimization_priority: "high"
      security_validation_level: "strict"
      
      human_escalation_triggers:
        - "complex_integration_architecture_required"
        - "cross_system_security_concerns_identified"
        - "performance_bottleneck_analysis_needed"
        - "business_logic_interpretation_required"
        - "legacy_system_integration_challenges"
    
    integration_tools:
      middleware_platforms:
        - "apache_kafka"
        - "rabbitmq"
        - "apache_pulsar"
        - "redis_streams"
      
      api_management:
        - "swagger_openapi"
        - "postman"
        - "insomnia"
        - "apicurio"
      
      data_pipeline_tools:
        - "apache_airflow"
        - "prefect"
        - "dagster"
        - "kubernetes_workflows"

  # Integration Design Workflows
  integration_workflows:
    integration_analysis:
      workflow_name: "comprehensive_integration_analysis"
      
      steps:
        requirements_analysis:
          description: "Analyze integration requirements and constraints"
          actions:
            - "identify_source_target_systems"
            - "analyze_data_volume_velocity"
            - "assess_latency_requirements"
            - "evaluate_security_constraints"
            - "understand_business_rules"
          
          deliverables:
            - "integration_requirements_specification"
            - "system_inventory_matrix"
            - "performance_requirements_document"
            - "security_constraints_analysis"
        
        architecture_design:
          description: "Design integration architecture and patterns"
          depends_on: ["requirements_analysis"]
          
          actions:
            - "select_integration_patterns"
            - "design_data_flow_architecture"
            - "define_api_specifications"
            - "plan_error_handling_strategies"
            - "design_monitoring_observability"
          
          architecture_considerations:
            - "scalability_planning"
            - "fault_tolerance_design"
            - "security_architecture"
            - "performance_optimization"
            - "maintainability_factors"
        
        implementation_planning:
          description: "Create detailed implementation plan"
          depends_on: ["architecture_design"]
          
          actions:
            - "break_down_implementation_phases"
            - "identify_technical_dependencies"
            - "plan_testing_strategies"
            - "define_deployment_approach"
            - "create_rollback_procedures"
          
          deliverables:
            - "implementation_roadmap"
            - "technical_specification_documents"
            - "testing_strategy_plan"
            - "deployment_runbook"
    
    api_management_workflow:
      workflow_name: "api_lifecycle_management"
      
      lifecycle_stages:
        design:
          activities:
            - "api_specification_creation"
            - "resource_model_definition"
            - "endpoint_design"
            - "authentication_authorization_design"
          
          standards_compliance:
            - "restful_api_principles"
            - "openapi_3_0_specification"
            - "json_api_standards"
            - "http_status_code_conventions"
        
        development:
          activities:
            - "api_implementation"
            - "mock_service_creation"
            - "unit_testing"
            - "integration_testing"
          
          quality_gates:
            - "api_specification_validation"
            - "security_vulnerability_scanning"
            - "performance_benchmarking"
            - "documentation_completeness"
        
        deployment:
          activities:
            - "api_versioning_strategy"
            - "environment_promotion"
            - "traffic_routing_configuration"
            - "monitoring_alerting_setup"
        
        management:
          activities:
            - "usage_analytics_monitoring"
            - "performance_optimization"
            - "security_policy_enforcement"
            - "deprecation_lifecycle_management"

  # Integration Implementation
  implementation_guidance:
    microservices_integration:
      service_discovery:
        patterns:
          client_side_discovery:
            description: "Client queries service registry directly"
            pros: ["simple_implementation", "reduced_network_hops"]
            cons: ["coupling_to_discovery_service", "language_specific_logic"]
          
          server_side_discovery:
            description: "Load balancer queries service registry"
            pros: ["language_agnostic", "centralized_logic"]
            cons: ["additional_network_hop", "load_balancer_dependency"]
        
        implementation_tools:
          - "consul"
          - "etcd"
          - "kubernetes_service_discovery"
          - "eureka"
      
      inter_service_communication:
        synchronous_communication:
          protocols: ["http_rest", "grpc", "graphql"]
          patterns: ["request_response", "api_gateway", "backend_for_frontend"]
        
        asynchronous_communication:
          protocols: ["amqp", "mqtt", "kafka", "nats"]
          patterns: ["event_sourcing", "cqrs", "saga", "choreography"]
    
    data_pipeline_implementation:
      stream_processing:
        real_time_patterns:
          - "event_stream_processing"
          - "complex_event_processing"
          - "stream_analytics"
          - "real_time_aggregation"
        
        frameworks:
          - "apache_kafka_streams"
          - "apache_flink"
          - "apache_storm"
          - "akka_streams"
      
      batch_processing:
        scheduling_patterns:
          - "time_based_scheduling"
          - "event_driven_scheduling"
          - "dependency_based_scheduling"
          - "data_driven_scheduling"
        
        frameworks:
          - "apache_spark"
          - "apache_beam"
          - "hadoop_mapreduce"
          - "dask"

  # Error Handling and Resilience
  resilience_patterns:
    fault_tolerance:
      circuit_breaker:
        description: "Prevent cascade failures by monitoring service health"
        states: ["closed", "open", "half_open"]
        configuration_parameters:
          - "failure_threshold"
          - "timeout_duration"
          - "retry_attempts"
          - "recovery_time"
      
      bulkhead:
        description: "Isolate critical resources to prevent failure propagation"
        isolation_strategies:
          - "thread_pool_isolation"
          - "connection_pool_isolation"
          - "process_isolation"
          - "service_isolation"
      
      timeout:
        description: "Prevent indefinite waiting for responses"
        timeout_strategies:
          - "network_timeout"
          - "read_timeout"
          - "connection_timeout"
          - "overall_request_timeout"
    
    retry_strategies:
      retry_patterns:
        exponential_backoff:
          description: "Gradually increase delay between retry attempts"
          parameters: ["initial_delay", "max_delay", "backoff_multiplier"]
        
        fixed_interval:
          description: "Constant delay between retry attempts"
          parameters: ["retry_interval", "max_attempts"]
        
        jittered_backoff:
          description: "Add randomness to prevent thundering herd"
          parameters: ["base_delay", "max_delay", "jitter_factor"]

  # Monitoring and Observability
  observability_integration:
    distributed_tracing:
      trace_propagation:
        - "correlation_id_management"
        - "span_context_propagation"
        - "baggage_item_handling"
        - "sampling_strategy_implementation"
      
      tracing_frameworks:
        - "opentelemetry"
        - "jaeger"
        - "zipkin"
        - "aws_x_ray"
    
    metrics_collection:
      integration_metrics:
        - "request_throughput"
        - "response_latency"
        - "error_rates"
        - "queue_depths"
        - "connection_pool_utilization"
      
      business_metrics:
        - "data_processing_volume"
        - "integration_success_rate"
        - "data_quality_metrics"
        - "cost_per_transaction"

integration:
  # Development Workflow Integration
  development_integration:
    ci_cd_integration:
      integration_testing:
        - "contract_testing"
        - "end_to_end_testing"
        - "performance_testing"
        - "security_testing"
      
      deployment_automation:
        - "blue_green_deployment"
        - "canary_deployment"
        - "rolling_deployment"
        - "feature_flag_integration"
    
    api_governance:
      design_first_approach:
        - "api_specification_validation"
        - "breaking_change_detection"
        - "backward_compatibility_checking"
        - "versioning_strategy_enforcement"

  # Enterprise Integration
  enterprise_integration:
    legacy_system_integration:
      integration_approaches:
        - "api_wrapper_development"
        - "database_direct_integration"
        - "file_based_integration"
        - "message_queue_bridging"
      
      modernization_strategies:
        - "strangler_fig_pattern"
        - "database_decomposition"
        - "event_interception"
        - "facade_pattern_implementation"

validation:
  # Integration Agent Validation
  agent_effectiveness:
    integration_design_quality: "high"
    implementation_success_rate: ">95%"
    performance_optimization_impact: "measurable"
    error_reduction_achievement: ">80%"
  
  # Integration System Validation
  system_validation:
    data_flow_reliability: ">99.9%"
    api_performance_optimization: "validated"
    security_compliance: "verified"
    scalability_demonstration: "proven"

examples:
  # Microservices Integration Example
  microservices_integration_example:
    integration_design: |
      ## Microservices Integration Architecture
      
      ### Service Communication Pattern
      - **Pattern**: API Gateway + Service Mesh
      - **Synchronous**: REST APIs via API Gateway
      - **Asynchronous**: Event-driven via Kafka
      - **Service Discovery**: Kubernetes native
      
      ### Data Flow Design
      ```yaml
      services:
        user_service:
          endpoints:
            - GET /users/{id}
            - POST /users
          events_published:
            - user.created
            - user.updated
        
        notification_service:
          events_subscribed:
            - user.created
            - order.completed
          external_apis:
            - email_provider
            - sms_provider
      ```
      
      ### Integration Points
      1. **API Gateway**: Kong with rate limiting and authentication
      2. **Message Broker**: Kafka with dead letter queues
      3. **Service Mesh**: Istio for traffic management
      4. **Monitoring**: Jaeger for distributed tracing

# CLI Usage Examples
cli_usage: |
  # Initialize integration agent
  hugai agent init integration --patterns microservices,event-driven --tools kafka,kong,istio
  
  # Analyze integration requirements
  hugai agent integration analyze --systems source.yaml,target.yaml --requirements integration-reqs.md
  
  # Design integration architecture
  hugai agent integration design --pattern api-gateway --data-flow event-driven --output architecture.yaml
  
  # Generate API specifications
  hugai agent integration api-spec --service user-service --format openapi3 --include-examples
  
  # Create data pipeline
  hugai agent integration pipeline --source database --target data-warehouse --pattern etl --schedule daily
  
  # Monitor integration health
  hugai agent integration monitor --real-time --metrics throughput,latency,errors --dashboard