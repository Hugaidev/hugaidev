metadata:
  name: performance-agent-configuration
  version: 1.0.0
  description: "AI agent specialized in performance analysis, optimization, and monitoring for HUGAI applications"
  category: specialized-agents
  dependencies:
    - llm-models
    - performance-monitoring-tools
    - code-analysis-tools
    - benchmarking-frameworks
  tags:
    - performance-analysis
    - optimization
    - monitoring
    - scalability
    - resource-management

configuration:
  # Performance Agent Philosophy
  agent_philosophy:
    purpose: "Analyze, optimize, and monitor application performance to ensure HUGAI systems meet scalability and efficiency requirements"
    principles:
      data_driven_optimization: "Base optimization decisions on comprehensive performance data"
      proactive_monitoring: "Continuously monitor and predict performance issues before they impact users"
      scalable_solutions: "Design performance solutions that scale with system growth"
      resource_efficiency: "Optimize resource utilization while maintaining functionality"
      user_experience_focus: "Prioritize optimizations that improve user experience"

  # Core Capabilities
  core_capabilities:
    performance_analysis:
      analysis_types:
        - "application_performance_profiling"
        - "database_query_optimization"
        - "network_latency_analysis"
        - "memory_usage_patterns"
        - "cpu_utilization_analysis"
        - "i_o_bottleneck_detection"
        - "cache_effectiveness_evaluation"
        - "load_balancing_efficiency"
      
      analysis_scope:
        frontend_performance:
          - "page_load_times"
          - "javascript_execution_profiling"
          - "render_blocking_resources"
          - "bundle_size_optimization"
          - "lazy_loading_effectiveness"
        
        backend_performance:
          - "api_response_times"
          - "database_query_performance"
          - "service_to_service_latency"
          - "resource_consumption_patterns"
          - "concurrent_user_handling"
        
        infrastructure_performance:
          - "server_resource_utilization"
          - "container_performance_metrics"
          - "network_throughput_analysis"
          - "storage_i_o_performance"
          - "scaling_behavior_analysis"
    
    optimization_strategies:
      code_level_optimizations:
        - "algorithm_complexity_reduction"
        - "data_structure_optimization"
        - "memory_leak_prevention"
        - "efficient_loops_and_iterations"
        - "function_call_optimization"
      
      database_optimizations:
        - "query_execution_plan_improvement"
        - "index_strategy_optimization"
        - "connection_pooling_tuning"
        - "cache_layer_implementation"
        - "database_schema_optimization"
      
      infrastructure_optimizations:
        - "load_balancer_configuration"
        - "caching_strategy_implementation"
        - "cdn_optimization"
        - "auto_scaling_configuration"
        - "resource_allocation_tuning"
    
    monitoring_capabilities:
      real_time_monitoring:
        - "application_performance_metrics"
        - "user_experience_monitoring"
        - "error_rate_tracking"
        - "resource_utilization_monitoring"
        - "sla_compliance_tracking"
      
      predictive_analysis:
        - "performance_trend_analysis"
        - "capacity_planning_predictions"
        - "bottleneck_prediction"
        - "scaling_requirement_forecasting"
        - "performance_regression_detection"

  # Agent Configuration
  agent_configuration:
    model_selection:
      primary_model: "claude-3-5-sonnet"
      fallback_models: ["gpt-4-turbo", "gemini-pro"]
      
      task_specific_models:
        complex_analysis: "claude-3-5-sonnet"
        data_processing: "gpt-4-turbo"
        report_generation: "claude-3-haiku"
    
    operational_parameters:
      response_time_target: "30s"
      analysis_depth: "comprehensive"
      confidence_threshold: 0.85
      
      human_escalation_triggers:
        - "critical_performance_degradation_detected"
        - "optimization_confidence_below_threshold"
        - "conflicting_optimization_recommendations"
        - "business_impact_assessment_required"
    
    integration_points:
      monitoring_systems:
        - "prometheus"
        - "grafana"
        - "newrelic"
        - "datadog"
        - "elastic_apm"
      
      profiling_tools:
        - "chrome_devtools"
        - "nodejs_profiler"
        - "python_cprofile"
        - "java_profiler"
        - "go_pprof"
      
      load_testing_tools:
        - "k6"
        - "jmeter"
        - "artillery"
        - "wrk"
        - "gatling"

  # Performance Analysis Workflows
  analysis_workflows:
    performance_assessment:
      workflow_name: "comprehensive_performance_assessment"
      
      steps:
        baseline_establishment:
          description: "Establish performance baseline metrics"
          actions:
            - "collect_current_performance_data"
            - "identify_key_performance_indicators"
            - "establish_baseline_measurements"
            - "document_current_architecture"
          
          success_criteria:
            - "complete_baseline_metrics_collected"
            - "performance_indicators_identified"
            - "baseline_documentation_created"
        
        bottleneck_identification:
          description: "Identify performance bottlenecks and inefficiencies"
          depends_on: ["baseline_establishment"]
          
          actions:
            - "analyze_application_profiling_data"
            - "examine_database_query_performance"
            - "evaluate_network_latency_patterns"
            - "assess_resource_utilization_efficiency"
          
          analysis_methods:
            - "statistical_performance_analysis"
            - "correlation_analysis"
            - "trend_analysis"
            - "comparative_benchmarking"
        
        optimization_planning:
          description: "Develop optimization strategy and implementation plan"
          depends_on: ["bottleneck_identification"]
          
          actions:
            - "prioritize_optimization_opportunities"
            - "estimate_optimization_impact"
            - "assess_implementation_complexity"
            - "create_optimization_roadmap"
          
          deliverables:
            - "optimization_priority_matrix"
            - "impact_vs_effort_analysis"
            - "implementation_timeline"
            - "risk_assessment_report"
        
        implementation_guidance:
          description: "Provide detailed implementation guidance"
          depends_on: ["optimization_planning"]
          
          actions:
            - "generate_specific_optimization_code"
            - "create_configuration_recommendations"
            - "develop_monitoring_strategies"
            - "define_success_metrics"
    
    continuous_monitoring:
      workflow_name: "continuous_performance_monitoring"
      
      monitoring_frequency: "real_time"
      
      monitoring_aspects:
        - "response_time_tracking"
        - "throughput_monitoring"
        - "error_rate_surveillance"
        - "resource_utilization_tracking"
        - "user_experience_metrics"
      
      alert_conditions:
        critical:
          - "response_time_increase_>50%"
          - "error_rate_>5%"
          - "cpu_utilization_>90%"
          - "memory_usage_>85%"
        
        warning:
          - "response_time_increase_>20%"
          - "error_rate_>2%"
          - "cpu_utilization_>75%"
          - "memory_usage_>70%"

  # Optimization Strategies
  optimization_strategies:
    frontend_optimization:
      code_splitting:
        techniques:
          - "route_based_splitting"
          - "component_based_splitting"
          - "vendor_bundle_separation"
          - "dynamic_imports"
        
        implementation_guidance: |
          Implement intelligent code splitting to reduce initial bundle size:
          1. Split code at route boundaries
          2. Lazy load non-critical components
          3. Separate vendor dependencies
          4. Use dynamic imports for conditional features
      
      asset_optimization:
        techniques:
          - "image_optimization"
          - "css_minification"
          - "javascript_compression"
          - "font_optimization"
          - "svg_optimization"
        
        tools:
          - "webpack_optimization"
          - "parcel_bundler"
          - "vite_build_optimization"
          - "rollup_configuration"
    
    backend_optimization:
      database_optimization:
        query_optimization:
          - "index_strategy_improvement"
          - "query_rewriting"
          - "join_optimization"
          - "subquery_elimination"
        
        connection_management:
          - "connection_pooling"
          - "prepared_statement_usage"
          - "transaction_optimization"
          - "batch_operation_implementation"
      
      caching_strategies:
        application_caching:
          - "in_memory_caching"
          - "distributed_caching"
          - "query_result_caching"
          - "computed_value_caching"
        
        infrastructure_caching:
          - "cdn_implementation"
          - "reverse_proxy_caching"
          - "database_query_caching"
          - "api_response_caching"
    
    infrastructure_optimization:
      scaling_strategies:
        horizontal_scaling:
          - "load_balancer_optimization"
          - "auto_scaling_configuration"
          - "microservices_scaling"
          - "database_sharding"
        
        vertical_scaling:
          - "resource_allocation_optimization"
          - "memory_management_tuning"
          - "cpu_optimization"
          - "storage_performance_tuning"

  # Performance Testing Integration
  testing_integration:
    load_testing:
      test_scenarios:
        baseline_load:
          virtual_users: 100
          duration: "10m"
          ramp_up: "2m"
        
        stress_test:
          virtual_users: 500
          duration: "20m"
          ramp_up: "5m"
        
        spike_test:
          base_users: 100
          spike_users: 1000
          spike_duration: "2m"
      
      success_criteria:
        response_time_p95: "<2s"
        error_rate: "<1%"
        throughput: ">200_rps"
        resource_utilization: "<80%"
    
    benchmark_testing:
      performance_benchmarks:
        - "api_response_time_benchmarks"
        - "database_query_performance_benchmarks"
        - "frontend_rendering_benchmarks"
        - "memory_usage_benchmarks"
        - "concurrent_user_handling_benchmarks"

integration:
  # Development Workflow Integration
  development_integration:
    code_review_integration:
      performance_checks:
        - "algorithm_complexity_analysis"
        - "memory_usage_impact_assessment"
        - "database_query_efficiency_review"
        - "api_endpoint_performance_evaluation"
    
    ci_cd_integration:
      performance_gates:
        - "performance_regression_detection"
        - "load_test_validation"
        - "resource_usage_thresholds"
        - "response_time_requirements"

  # Monitoring System Integration
  monitoring_integration:
    alerting_configuration:
      performance_alerts:
        - alert: "HighResponseTime"
          condition: "avg_response_time > 2s"
          severity: "warning"
        
        - alert: "CriticalResponseTime"
          condition: "avg_response_time > 5s"
          severity: "critical"
        
        - alert: "HighErrorRate"
          condition: "error_rate > 5%"
          severity: "critical"
    
    dashboard_integration:
      performance_dashboards:
        - "application_performance_overview"
        - "infrastructure_resource_utilization"
        - "user_experience_metrics"
        - "performance_trends_analysis"

validation:
  # Performance Agent Validation
  agent_effectiveness:
    performance_improvement_measurement: "quantifiable_improvements"
    optimization_success_rate: ">80%"
    false_positive_rate: "<10%"
    analysis_accuracy: ">90%"
  
  # Performance Impact Validation
  performance_validation:
    response_time_improvement: "measurable"
    resource_utilization_optimization: "validated"
    scalability_enhancement: "demonstrated"
    user_experience_improvement: "verified"

examples:
  # Performance Analysis Example
  performance_analysis_example:
    analysis_request: |
      {
        "analysis_type": "comprehensive_performance_assessment",
        "target_application": "hugai-web-app",
        "focus_areas": ["frontend", "api", "database"],
        "performance_goals": {
          "page_load_time": "<2s",
          "api_response_time": "<500ms",
          "concurrent_users": 1000
        }
      }
    
    analysis_output: |
      ## Performance Analysis Report
      
      ### Executive Summary
      - Overall performance grade: B+
      - Critical bottlenecks identified: 3
      - Optimization opportunities: 12
      - Estimated improvement potential: 40%
      
      ### Key Findings
      1. **Database Query Performance**: 3 slow queries causing 60% of response time
      2. **Frontend Bundle Size**: Large JavaScript bundles affecting load times
      3. **Cache Utilization**: Suboptimal caching strategy reducing efficiency
      
      ### Optimization Recommendations
      1. **High Priority**: Optimize database queries (Est. 30% improvement)
      2. **Medium Priority**: Implement code splitting (Est. 25% improvement)
      3. **Low Priority**: Enhance caching strategy (Est. 15% improvement)

# CLI Usage Examples
cli_usage: |
  # Initialize performance agent
  hugai agent init performance --models claude-3-5-sonnet,gpt-4-turbo --monitoring-tools prometheus,grafana
  
  # Run performance analysis
  hugai agent performance analyze --app hugai-web-app --scope full --report detailed
  
  # Monitor performance metrics
  hugai agent performance monitor --real-time --alerts --dashboard
  
  # Generate optimization recommendations
  hugai agent performance optimize --target response-time --goal "<2s" --implementation-guide
  
  # Load testing with performance analysis
  hugai agent performance load-test --scenario stress --duration 20m --analysis comprehensive