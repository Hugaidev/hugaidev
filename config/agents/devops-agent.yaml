metadata:
  name: devops-agent
  version: 1.0.0
  description: "Automates infrastructure provisioning, CI/CD pipeline configuration, and operational tooling"
  category: operational
  dependencies:
    - deployment-agent
    - security-agent
    - observability-monitoring-agent
    - infrastructure-tools
  tags:
    - devops
    - infrastructure-as-code
    - ci-cd
    - automation
    - operations

configuration:
  # Core DevOps Settings
  automation_level: comprehensive  # Options: basic, standard, comprehensive, full_automation
  infrastructure_approach: declarative  # Options: imperative, declarative, hybrid
  pipeline_strategy: gitops  # Options: traditional, gitops, hybrid
  
  # CI/CD Platform Support
  cicd_platforms:
    github_actions:
      enabled: true
      workflow_templates: ".github/workflows/"
      secrets_management: "github_secrets"
      artifact_storage: "github_packages"
      
    gitlab_ci:
      enabled: true
      pipeline_templates: ".gitlab-ci/"
      container_registry: "gitlab_registry"
      secrets_management: "gitlab_variables"
      
    jenkins:
      enabled: true
      pipeline_library: "jenkins-shared-library"
      credentials_management: "jenkins_vault"
      plugin_management: "automated"
      
    azure_devops:
      enabled: true
      pipeline_templates: "azure-pipelines/"
      artifact_feeds: "azure_artifacts"
      service_connections: "azure_service_principal"
      
    circleci:
      enabled: true
      config_path: ".circleci/config.yml"
      orbs_usage: "approved_orbs_only"
  
  # Infrastructure Platforms
  infrastructure_platforms:
    terraform:
      enabled: true
      version: ">=1.5.0"
      state_backend: "remote"
      provider_versions: "locked"
      
    pulumi:
      enabled: true
      runtime: "multiple"
      state_backend: "cloud"
      
    cloudformation:
      enabled: true
      template_format: "yaml"
      stack_policies: "enforced"
      
    ansible:
      enabled: true
      version: ">=6.0.0"
      vault_integration: true
      
    kubernetes:
      enabled: true
      manifest_management: "kustomize"
      helm_integration: true
  
  # Cloud Provider Support
  cloud_providers:
    aws:
      enabled: true
      regions: ["us-west-2", "us-east-1", "eu-west-1"]
      iam_strategy: "least_privilege"
      cost_optimization: enabled
      
    azure:
      enabled: true
      regions: ["westus2", "eastus", "westeurope"]
      rbac_strategy: "least_privilege"
      
    gcp:
      enabled: true
      regions: ["us-central1", "us-west1", "europe-west1"]
      iam_strategy: "least_privilege"
      
    on_premise:
      enabled: true
      virtualization: [vmware, hyper_v, kvm]
      orchestration: [kubernetes, docker_swarm]
  
  # Input Sources Configuration
  input_sources:
    repository_config: "{.hugai,config}/**/*.{yaml,json}"
    project_specifications: "specs/**/*.yaml"
    infrastructure_policies: "policies/infra/*.yaml"
    deployment_configs: "deployment/**/*.{yaml,json}"
    build_configurations: "{Dockerfile,docker-compose.yml,Makefile}"
    application_configs: "app/**/*.{yaml,json,env}"
    security_policies: "security/**/*.yaml"
    monitoring_configs: "monitoring/**/*.{yaml,json}"
  
  # Processing Pipeline
  processing_steps:
    - analyze_project_requirements
    - load_infrastructure_policies
    - design_ci_cd_pipeline
    - provision_infrastructure_resources
    - configure_environment_variables
    - setup_secrets_management
    - configure_monitoring_alerting
    - implement_security_controls
    - setup_backup_recovery
    - create_operational_runbooks
    - validate_configurations
    - test_infrastructure_deployment
  
  # CI/CD Pipeline Configuration
  cicd_configuration:
    pipeline_stages:
      - name: "build"
        triggers: ["push", "pull_request"]
        parallel_jobs: true
        
      - name: "test"
        dependencies: ["build"]
        test_types: ["unit", "integration", "security"]
        
      - name: "security_scan"
        dependencies: ["build"]
        scanners: ["sast", "dependency", "container"]
        
      - name: "deploy_staging"
        dependencies: ["test", "security_scan"]
        environment: "staging"
        approval_required: false
        
      - name: "deploy_production"
        dependencies: ["deploy_staging"]
        environment: "production"
        approval_required: true
        
    build_optimization:
      caching_strategy: "aggressive"
      parallel_builds: true
      build_matrix: supported
      dependency_caching: enabled
      
    deployment_strategies:
      staging: "rolling_update"
      production: "blue_green"
      feature_environments: "branch_based"
  
  # Infrastructure Configuration
  infrastructure_configuration:
    networking:
      vpc_strategy: "multi_tier"
      security_groups: "least_privilege"
      load_balancing: "application_level"
      
    compute:
      auto_scaling: enabled
      instance_types: "cost_optimized"
      container_orchestration: "kubernetes"
      
    storage:
      backup_strategy: "automated"
      encryption: "at_rest_and_transit"
      retention_policies: "compliance_based"
      
    database:
      high_availability: true
      backup_strategy: "point_in_time_recovery"
      monitoring: "comprehensive"
  
  # Observability Configuration
  observability_configuration:
    monitoring:
      metrics_collection: "prometheus"
      dashboards: "grafana"
      alerting: "alertmanager"
      
    logging:
      log_aggregation: "elk_stack"
      log_retention: "compliance_based"
      structured_logging: "json"
      
    tracing:
      distributed_tracing: "jaeger"
      sampling_strategy: "adaptive"
      
    uptime_monitoring:
      external_monitoring: "pingdom"
      health_checks: "automated"

integration:
  # Upstream Agents
  input_agents:
    - deployment_agent
    - security_agent
    - architecture_agent
    - implementation_agent
  
  # Downstream Agents
  output_agents:
    - observability_monitoring_agent
    - maintenance_agent
    - compliance_legal_agent
  
  # Tool Integration
  tool_integrations:
    version_control:
      git_hooks: ["pre-commit", "pre-push", "post-receive"]
      branch_protection: enabled
      commit_signing: required
      
    container_registries:
      docker_hub: conditional
      aws_ecr: true
      azure_acr: true
      gcp_gcr: true
      
    secret_management:
      hashicorp_vault: preferred
      aws_secrets_manager: supported
      azure_key_vault: supported
      gcp_secret_manager: supported
      
    monitoring_tools:
      datadog: optional
      new_relic: optional
      splunk: optional
      elastic_apm: supported
  
  # Communication Integration
  notification_systems:
    slack:
      deployment_notifications: enabled
      alert_routing: by_severity
      
    email:
      digest_reports: daily
      critical_alerts: immediate
      
    pagerduty:
      escalation_policies: defined
      on_call_rotations: managed
      
    teams:
      integration_notifications: enabled
      approval_workflows: supported

validation:
  # Input Validation
  input_validation:
    project_requirements:
      specification_completeness: verified
      dependency_consistency: validated
      configuration_syntax: correct
      
    policy_compliance:
      security_policies: enforced
      compliance_frameworks: validated
      organizational_standards: met
      
    resource_constraints:
      budget_limits: respected
      quota_availability: verified
      region_restrictions: enforced
  
  # Infrastructure Validation
  infrastructure_validation:
    template_validation:
      syntax_checking: automated
      resource_validation: comprehensive
      cost_estimation: included
      
    security_validation:
      network_security: validated
      access_controls: enforced
      encryption_standards: met
      
    compliance_validation:
      regulatory_requirements: checked
      audit_trail: comprehensive
      data_governance: enforced
  
  # Pipeline Validation
  pipeline_validation:
    workflow_syntax: correct
    dependency_management: validated
    secret_handling: secure
    artifact_management: proper

monitoring:
  # DevOps Metrics
  metrics:
    pipeline_success_rate:
      description: "Percentage of CI/CD pipeline runs completing successfully"
      target: ">95%"
      alert_threshold: "<90%"
      
    average_pipeline_duration:
      description: "Mean time for CI/CD pipeline executions"
      target: "<20min"
      alert_threshold: ">45min"
      
    provisioning_time:
      description: "Average duration to provision infrastructure"
      target: "<15min"
      alert_threshold: ">30min"
      
    provisioning_success_rate:
      description: "Percentage of infrastructure provisioning without errors"
      target: ">98%"
      alert_threshold: "<95%"
      
    infrastructure_drift_detection:
      description: "Percentage of resources detected out of declared state"
      target: "<2%"
      alert_threshold: ">5%"
      
    provisioning_frequency:
      description: "Number of infrastructure changes per week"
      tracking: "weekly"
      trend_analysis: enabled
      
    secrets_compliance_rate:
      description: "Percentage of secrets managed according to policy"
      target: ">99%"
      alert_threshold: "<95%"
  
  # Operational Metrics
  operational_metrics:
    deployment_frequency: "daily"
    change_failure_rate: "<5%"
    mean_time_to_recovery: "<1hour"
    lead_time_for_changes: "<4hours"
    
  # Cost Metrics
  cost_metrics:
    infrastructure_cost_optimization: ">20%"
    unused_resource_detection: "automated"
    cost_per_deployment: "tracked"

examples:
  # GitHub Actions Workflow
  github_actions_example:
    input:
      project_type: "nodejs_api"
      deployment_target: "aws_ecs"
      testing_framework: "jest"
      
    output:
      workflow_yaml: |
        name: CI/CD Pipeline
        
        on:
          push:
            branches: [main, develop]
          pull_request:
            branches: [main]
        
        jobs:
          build:
            runs-on: ubuntu-latest
            steps:
              - uses: actions/checkout@v4
              - uses: actions/setup-node@v4
                with:
                  node-version: '18'
                  cache: 'npm'
              - run: npm ci
              - run: npm run build
              - run: npm test
              
          security-scan:
            runs-on: ubuntu-latest
            needs: build
            steps:
              - uses: actions/checkout@v4
              - name: Run Snyk security scan
                uses: snyk/actions/node@master
                env:
                  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
                  
          deploy-staging:
            runs-on: ubuntu-latest
            needs: [build, security-scan]
            if: github.ref == 'refs/heads/develop'
            environment: staging
            steps:
              - uses: actions/checkout@v4
              - name: Deploy to ECS
                run: |
                  aws ecs update-service --cluster staging --service api --force-new-deployment
  
  # Terraform Infrastructure
  terraform_example:
    input:
      cloud_provider: "aws"
      application: "web_api"
      environment: "production"
      
    output:
      main_tf: |
        terraform {
          required_version = ">= 1.5.0"
          required_providers {
            aws = {
              source  = "hashicorp/aws"
              version = "~> 5.0"
            }
          }
          backend "s3" {
            bucket = "company-terraform-state"
            key    = "production/web-api/terraform.tfstate"
            region = "us-west-2"
          }
        }
        
        module "vpc" {
          source = "./modules/vpc"
          
          name               = "web-api-vpc"
          cidr               = "10.0.0.0/16"
          availability_zones = ["us-west-2a", "us-west-2b", "us-west-2c"]
          
          enable_nat_gateway = true
          enable_vpn_gateway = false
          
          tags = local.common_tags
        }
        
        module "ecs_cluster" {
          source = "./modules/ecs"
          
          cluster_name = "web-api-cluster"
          vpc_id       = module.vpc.vpc_id
          subnet_ids   = module.vpc.private_subnets
          
          capacity_providers = ["FARGATE", "FARGATE_SPOT"]
          
          tags = local.common_tags
        }
        
        locals {
          common_tags = {
            Environment = "production"
            Application = "web-api"
            ManagedBy   = "terraform"
            Owner       = "platform-team"
          }
        }
  
  # Kubernetes Deployment
  kubernetes_example:
    input:
      application: "user_service"
      environment: "production"
      replicas: 3
      
    output:
      deployment_yaml: |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: user-service
          namespace: production
          labels:
            app: user-service
            environment: production
        spec:
          replicas: 3
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxUnavailable: 1
              maxSurge: 1
          selector:
            matchLabels:
              app: user-service
          template:
            metadata:
              labels:
                app: user-service
                environment: production
            spec:
              containers:
              - name: user-service
                image: registry.company.com/user-service:latest
                ports:
                - containerPort: 8080
                env:
                - name: DATABASE_URL
                  valueFrom:
                    secretKeyRef:
                      name: user-service-secrets
                      key: database-url
                resources:
                  requests:
                    memory: "256Mi"
                    cpu: "250m"
                  limits:
                    memory: "512Mi"
                    cpu: "500m"
                readinessProbe:
                  httpGet:
                    path: /health/ready
                    port: 8080
                  initialDelaySeconds: 10
                  periodSeconds: 5
                livenessProbe:
                  httpGet:
                    path: /health/live
                    port: 8080
                  initialDelaySeconds: 30
                  periodSeconds: 10

# CLI Usage Examples
cli_usage: |
  # Initialize DevOps configuration
  hugai devops init --platform aws --cicd github-actions --monitoring prometheus
  
  # Generate CI/CD pipeline
  hugai devops pipeline --type nodejs --deploy-target ecs --environment staging,production
  
  # Provision infrastructure
  hugai devops infra provision --environment production --terraform-dir infrastructure/
  
  # Update pipeline configuration
  hugai devops pipeline update --add-stage security-scan --parallel-jobs 4
  
  # Validate infrastructure
  hugai devops infra validate --terraform-dir infrastructure/ --dry-run
  
  # Setup monitoring
  hugai devops monitoring setup --prometheus --grafana --alertmanager
  
  # Cost optimization analysis
  hugai devops cost-optimize --analyze --recommendations