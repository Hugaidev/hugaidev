metadata:
  name: maintenance-agent
  version: 1.0.0
  description: "Automates health checks, updates, and corrective maintenance tasks for system reliability"
  category: operational
  dependencies:
    - observability-monitoring-agent
    - security-agent
    - deployment-agent
    - infrastructure-tools
  tags:
    - maintenance
    - health-monitoring
    - patch-management
    - system-optimization
    - automation

configuration:
  # Core Maintenance Settings
  maintenance_approach: proactive  # Options: reactive, proactive, predictive
  automation_level: comprehensive  # Options: basic, standard, comprehensive, full_automation
  risk_tolerance: balanced  # Options: conservative, balanced, aggressive
  
  # Maintenance Categories
  maintenance_categories:
    preventive_maintenance:
      enabled: true
      frequency: "daily"
      scope: [health_checks, resource_optimization, security_hygiene]
      
    corrective_maintenance:
      enabled: true
      trigger: "alert_based"
      scope: [issue_resolution, performance_tuning, bug_fixes]
      
    adaptive_maintenance:
      enabled: true
      frequency: "weekly"
      scope: [dependency_updates, configuration_optimization, capacity_adjustment]
      
    perfective_maintenance:
      enabled: true
      frequency: "monthly"
      scope: [performance_improvements, feature_enhancements, code_optimization]
  
  # Health Check Configuration
  health_checks:
    system_health:
      cpu_utilization: {threshold: 80, critical: 95}
      memory_usage: {threshold: 85, critical: 95}
      disk_space: {threshold: 80, critical: 90}
      network_connectivity: {timeout: 5, retries: 3}
      
    application_health:
      response_time: {threshold: "500ms", critical: "2s"}
      error_rate: {threshold: "1%", critical: "5%"}
      availability: {threshold: "99%", critical: "95%"}
      throughput: {baseline_deviation: "20%"}
      
    database_health:
      connection_pool: {threshold: 80, critical: 95}
      query_performance: {slow_query_threshold: "1s"}
      replication_lag: {threshold: "30s", critical: "60s"}
      storage_growth: {weekly_threshold: "10%"}
      
    security_health:
      certificate_expiry: {warning: "30 days", critical: "7 days"}
      secret_rotation: {overdue_threshold: "90 days"}
      vulnerability_scan: {high_severity_threshold: 0}
      access_audit: {frequency: "daily"}
  
  # Patch Management
  patch_management:
    update_policies:
      security_patches: "immediate"  # Within 24 hours
      critical_patches: "weekly"     # Within 7 days
      minor_updates: "monthly"       # Monthly maintenance window
      major_upgrades: "quarterly"    # Planned quarterly upgrades
      
    testing_strategy:
      staging_validation: "required"
      rollback_testing: "mandatory"
      performance_impact: "measured"
      security_validation: "comprehensive"
      
    supported_components:
      operating_systems: [ubuntu, centos, rhel, windows_server]
      container_images: [docker, kubernetes]
      dependencies: [npm, pip, maven, nuget]
      databases: [postgresql, mysql, mongodb, redis]
      web_servers: [nginx, apache, iis]
  
  # Input Sources Configuration
  input_sources:
    monitoring_metrics: "metrics/**/*.{json,csv}"
    system_logs: "logs/**/*.{log,json}"
    maintenance_schedules: "schedules/maintenance.yaml"
    patch_policies: "policies/patches/*.yaml"
    health_check_configs: "health-checks/*.yaml"
    alert_configurations: "alerts/*.yaml"
    maintenance_scripts: "scripts/maintenance/*.{sh,py,ps1}"
    rollback_procedures: "procedures/rollback/*.yaml"
  
  # Processing Pipeline
  processing_steps:
    - load_maintenance_schedule
    - assess_system_health
    - identify_required_patches
    - plan_maintenance_activities
    - execute_pre_maintenance_checks
    - perform_maintenance_tasks
    - validate_post_maintenance_state
    - execute_rollback_if_needed
    - update_maintenance_records
    - generate_maintenance_reports
    - schedule_next_maintenance
    - notify_stakeholders
  
  # Maintenance Windows
  maintenance_windows:
    regular_maintenance:
      frequency: "weekly"
      day: "sunday"
      time: "02:00-06:00"
      timezone: "UTC"
      duration: "4 hours"
      
    emergency_maintenance:
      availability: "24/7"
      approval_required: true
      max_duration: "2 hours"
      rollback_timeout: "30 minutes"
      
    planned_upgrades:
      frequency: "quarterly"
      advance_notice: "30 days"
      duration: "8 hours"
      testing_period: "2 weeks"
  
  # Automation Rules
  automation_rules:
    auto_execute_conditions:
      - low_risk_patches: true
      - security_critical: true
      - performance_degradation: ">20%"
      - storage_critical: ">90%"
      
    human_approval_required:
      - major_version_upgrades: true
      - schema_changes: true
      - production_downtime: ">30min"
      - rollback_operations: conditional
      
    rollback_triggers:
      - error_rate_increase: ">50%"
      - response_time_degradation: ">100%"
      - availability_drop: "<99%"
      - critical_service_failure: true

integration:
  # Upstream Agents
  input_agents:
    - observability_monitoring_agent
    - security_agent
    - performance_agent
    - deployment_agent
  
  # Downstream Agents
  output_agents:
    - observability_monitoring_agent
    - compliance_legal_agent
    - documentation_writer_agent
  
  # Monitoring Integration
  monitoring_systems:
    prometheus:
      metrics_endpoint: "/metrics"
      alert_manager: "integrated"
      
    grafana:
      dashboard_updates: "automated"
      notification_channels: "configured"
      
    elastic_stack:
      log_analysis: "automated"
      anomaly_detection: "ml_based"
      
    datadog:
      synthetic_monitoring: "enabled"
      apm_integration: "comprehensive"
  
  # Infrastructure Integration
  infrastructure_tools:
    ansible:
      playbook_execution: "automated"
      inventory_management: "dynamic"
      
    terraform:
      state_management: "backend_integrated"
      drift_detection: "continuous"
      
    kubernetes:
      rolling_updates: "automated"
      pod_disruption_budgets: "respected"
      
    docker:
      image_updates: "automated"
      registry_cleanup: "scheduled"
  
  # Communication Integration
  notification_systems:
    slack:
      maintenance_notifications: "automated"
      alert_escalation: "configured"
      
    email:
      scheduled_reports: "weekly"
      critical_alerts: "immediate"
      
    pagerduty:
      incident_escalation: "integrated"
      maintenance_windows: "synchronized"
      
    jira:
      ticket_creation: "automated"
      maintenance_tracking: "integrated"

validation:
  # Pre-Maintenance Validation
  pre_maintenance_validation:
    system_health:
      all_services_healthy: required
      no_active_incidents: required
      backup_completion: verified
      
    resource_availability:
      sufficient_disk_space: ">20%"
      cpu_headroom: ">30%"
      memory_availability: ">25%"
      
    dependency_validation:
      external_services: "available"
      database_connections: "healthy"
      network_connectivity: "stable"
  
  # Maintenance Execution Validation
  execution_validation:
    change_validation:
      configuration_syntax: "correct"
      permission_verification: "passed"
      rollback_availability: "confirmed"
      
    impact_assessment:
      estimated_downtime: "within_window"
      service_dependencies: "analyzed"
      user_impact: "minimized"
      
    safety_checks:
      backup_verification: "completed"
      rollback_tested: "successful"
      monitoring_active: "confirmed"
  
  # Post-Maintenance Validation
  post_maintenance_validation:
    functional_validation:
      service_availability: "100%"
      performance_baseline: "maintained"
      error_rates: "normal"
      
    security_validation:
      access_controls: "functional"
      encryption_status: "verified"
      audit_logs: "active"
      
    monitoring_validation:
      metrics_collection: "active"
      alerting_functional: "tested"
      dashboard_updates: "current"

monitoring:
  # Maintenance Performance Metrics
  metrics:
    maintenance_success_rate:
      description: "Percentage of maintenance tasks completed without rollback"
      target: ">95%"
      alert_threshold: "<90%"
      calculation: "successful_tasks / total_tasks * 100"
      
    mean_time_to_repair:
      description: "Average time to complete maintenance tasks"
      target: "<2 hours"
      alert_threshold: ">4 hours"
      measurement: "task_completion_time"
      
    patch_coverage:
      description: "Percentage of eligible systems updated with latest patches"
      target: ">98%"
      alert_threshold: "<90%"
      calculation: "patched_systems / total_systems * 100"
      
    schedule_adherence:
      description: "Percentage of maintenance tasks executed within scheduled windows"
      target: ">95%"
      alert_threshold: "<85%"
      
    secret_rotation_compliance:
      description: "Percentage of secrets rotated according to policy"
      target: ">99%"
      alert_threshold: "<95%"
      
    resource_cleanup_efficiency:
      description: "Volume of obsolete resources cleaned per cycle"
      measurement: "gb_cleaned / maintenance_cycle"
      target: "measurable_improvement"
      
    post_maintenance_incident_rate:
      description: "Incidents occurring within 24 hours after maintenance"
      target: "<2%"
      alert_threshold: ">5%"
      calculation: "post_maintenance_incidents / maintenance_tasks"
  
  # System Health Metrics
  health_metrics:
    system_availability: ">99.9%"
    performance_degradation: "<5%"
    error_rate_increase: "<10%"
    recovery_time: "<15min"
    
  # Operational Metrics
  operational_metrics:
    automation_coverage: ">80%"
    manual_intervention_rate: "<20%"
    maintenance_cost_optimization: "tracked"

examples:
  # Security Patch Management
  security_patch_example:
    input:
      vulnerability: "CVE-2023-12345"
      affected_systems: ["web-servers", "api-gateways"]
      severity: "critical"
      patch_available: true
      
    output:
      maintenance_plan:
        schedule: "immediate"
        maintenance_window: "emergency"
        steps:
          - pre_check: "verify_system_health"
          - backup: "create_system_snapshots"
          - patch: "apply_security_updates"
          - validate: "run_security_scans"
          - rollback_plan: "restore_snapshots_if_failed"
        
        estimated_duration: "45 minutes"
        risk_assessment: "medium"
        rollback_time: "15 minutes"
  
  # Routine Health Check
  health_check_example:
    input:
      scope: "full_system_health"
      frequency: "daily"
      
    output:
      health_report:
        timestamp: "2025-06-16T22:00:00Z"
        overall_status: "healthy"
        components:
          web_servers:
            status: "healthy"
            cpu_usage: "45%"
            memory_usage: "62%"
            disk_space: "78%"
            
          databases:
            status: "warning"
            connection_pool: "85%"
            slow_queries: 12
            replication_lag: "15s"
            
          load_balancers:
            status: "healthy"
            active_connections: 1247
            response_time: "85ms"
            
        recommendations:
          - "Monitor database connection pool usage"
          - "Optimize slow queries identified"
          - "Schedule disk cleanup for web servers"
  
  # Dependency Update
  dependency_update_example:
    input:
      package_manager: "npm"
      security_updates: true
      minor_updates: true
      
    output:
      update_plan:
        security_updates:
          - package: "lodash"
            current: "4.17.15"
            target: "4.17.21"
            severity: "high"
            
        minor_updates:
          - package: "express"
            current: "4.18.0"
            target: "4.18.2"
            breaking_changes: false
            
        execution_strategy:
          - stage: "staging"
            validation: "automated_tests"
          - stage: "production"
            rollout: "blue_green"
            
        estimated_impact:
          downtime: "0 minutes"
          testing_time: "30 minutes"
          rollback_time: "5 minutes"

# CLI Usage Examples
cli_usage: |
  # Run comprehensive health check
  hugai maintenance health-check --scope all --detailed --output health-report.json
  
  # Execute scheduled maintenance
  hugai maintenance run --schedule weekly --window regular --dry-run
  
  # Apply security patches
  hugai maintenance patch --security-only --critical --auto-approve
  
  # Cleanup obsolete resources
  hugai maintenance cleanup --logs --temp-files --unused-images --age 30d
  
  # Emergency maintenance
  hugai maintenance emergency --issue database_connection_pool --approval-bypass
  
  # Generate maintenance report
  hugai maintenance report --period last_30_days --format pdf --include-metrics
  
  # Schedule future maintenance
  hugai maintenance schedule --task upgrade_nodejs --window next_sunday --duration 2h