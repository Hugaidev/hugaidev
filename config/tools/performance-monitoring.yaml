metadata:
  name: performance-monitoring-configuration
  version: 1.0.0
  description: "Advanced performance monitoring and optimization tools for HUGAI applications and infrastructure"
  category: infrastructure-tools
  dependencies:
    - observability-stack
    - load-testing-tools
    - profiling-tools
    - apm-agents
  tags:
    - performance-monitoring
    - application-performance
    - infrastructure-performance
    - optimization
    - profiling

configuration:
  # Performance Monitoring Philosophy
  performance_philosophy:
    purpose: "Provide comprehensive performance visibility and optimization capabilities for HUGAI systems"
    principles:
      proactive_monitoring: "Detect performance issues before they impact users"
      continuous_profiling: "Always-on profiling for deep performance insights"
      real_time_analysis: "Real-time performance data collection and analysis"
      predictive_scaling: "Use performance data to predict and prevent bottlenecks"
      user_experience_focus: "Prioritize metrics that directly impact user experience"

  # Application Performance Monitoring
  apm_platform:
    primary_provider: "datadog"
    fallback_provider: "new_relic"
    
    datadog_configuration:
      api_key: "${DATADOG_API_KEY}"
      app_key: "${DATADOG_APP_KEY}"
      site: "datadoghq.com"
      
      agent_configuration:
        version: "7.48.0"
        hostname_resolution: "kernel"
        
        log_level: "INFO"
        log_file: "/var/log/datadog/agent.log"
        
        collect_ec2_tags: true
        collect_gce_tags: true
        collect_azure_tags: true
        
        process_config:
          enabled: true
          scrub_args: true
          custom_sensitive_words: ["password", "token", "key", "secret"]
        
        apm_config:
          enabled: true
          env: "${ENVIRONMENT}"
          receiver_port: 8126
          
          analyzed_spans:
            "hugai.web|http.request": 1.0
            "hugai.agent|task.execute": 1.0
            "hugai.db|db.query": 0.1
          
          trace_sample_rate: 1.0
          max_traces_per_second: 10
          
          obfuscation:
            elasticsearch:
              enabled: true
              keep_values: ["user_id", "org_id"]
            
            http:
              remove_query_string: true
              remove_paths_with_digits: false
        
        logs_config:
          enabled: true
          container_collect_all: true
          
          processing_rules:
            - type: "exclude_at_match"
              name: "exclude_debug_logs"
              pattern: "DEBUG"
            
            - type: "mask_sequences"
              name: "mask_api_keys"
              pattern: "(api_key=)[^\\s]*"
              replace_placeholder: "$1***"
      
      synthetic_monitoring:
        browser_tests:
          hugai_web_app_performance:
            name: "HUGAI Web App Performance"
            url: "${HUGAI_WEB_URL}"
            locations: ["aws:us-east-1", "aws:eu-west-1", "aws:ap-southeast-1"]
            frequency: 300 # 5 minutes
            
            browser_test_config:
              device_ids: ["laptop_large", "tablet", "mobile_small"]
              browser_variables:
                - name: "TEST_USER_EMAIL"
                  value: "${TEST_USER_EMAIL}"
                  secure: true
              
              test_steps:
                - name: "Navigate to login page"
                  type: "click"
                  element: "css selector"
                  value: ".login-button"
                
                - name: "Login with test user"
                  type: "type"
                  element: "id"
                  value: "email"
                  text: "{{ TEST_USER_EMAIL }}"
                
                - name: "Navigate to dashboard"
                  type: "click"
                  element: "css selector"
                  value: ".dashboard-link"
                
                - name: "Verify dashboard load time"
                  type: "assertion"
                  assertion_type: "element_content"
                  element: ".dashboard-title"
                  target_value: "Dashboard"
                  timeout: 5000
            
            performance_thresholds:
              first_contentful_paint: 2000
              largest_contentful_paint: 4000
              cumulative_layout_shift: 0.1
              first_input_delay: 100
              time_to_interactive: 5000
            
            alerts:
              - type: "test_failure"
                message: "HUGAI web app synthetic test failed"
                recipients: ["hugai-team@company.com"]
              
              - type: "performance_degradation"
                threshold: "20%"
                comparison_window: "1h"
                recipients: ["performance-team@company.com"]
        
        api_tests:
          hugai_api_health:
            name: "HUGAI API Health Check"
            url: "${HUGAI_API_URL}/health"
            locations: ["aws:us-east-1", "aws:eu-west-1"]
            frequency: 60 # 1 minute
            
            request_config:
              method: "GET"
              headers:
                Authorization: "Bearer ${API_TEST_TOKEN}"
                Content-Type: "application/json"
              
              assertions:
                - type: "status_code"
                  operator: "is"
                  target: 200
                
                - type: "response_time"
                  operator: "lessThan"
                  target: 500
                
                - type: "body"
                  operator: "contains"
                  target: "\"status\":\"healthy\""
      
      custom_metrics:
        business_metrics:
          - name: "hugai.tasks.completed"
            type: "count"
            tags: ["agent_type", "task_type", "status"]
            
          - name: "hugai.user.satisfaction_score"
            type: "gauge"
            tags: ["feature", "user_segment"]
            
          - name: "hugai.code.generation_quality"
            type: "gauge"
            tags: ["language", "complexity"]
        
        performance_metrics:
          - name: "hugai.response_time"
            type: "histogram"
            tags: ["service", "endpoint", "method"]
            
          - name: "hugai.database.query_time"
            type: "histogram"
            tags: ["database", "operation", "table"]
            
          - name: "hugai.ai_model.inference_time"
            type: "histogram"
            tags: ["model_name", "model_version", "input_size"]
    
    new_relic_configuration:
      license_key: "${NEW_RELIC_LICENSE_KEY}"
      app_name: "HUGAI-${ENVIRONMENT}"
      
      agent_configuration:
        distributed_tracing:
          enabled: true
        
        application_logging:
          enabled: true
          forwarding:
            enabled: true
            max_samples_stored: 10000
          local_decorating:
            enabled: true
        
        custom_instrumentation:
          - name: "hugai_agent_tasks"
            class: "HugaiAgent"
            methods: ["execute_task", "validate_output"]
          
          - name: "ai_model_inference"
            class: "AIModelClient"
            methods: ["infer", "batch_infer"]
        
        attributes:
          include: ["user.id", "organization.id", "task.type"]
          exclude: ["request.headers.authorization"]

  # Infrastructure Performance Monitoring
  infrastructure_monitoring:
    system_metrics:
      collection_interval: 15 # seconds
      
      cpu_metrics:
        - "cpu_usage_percent"
        - "cpu_load_average_1m"
        - "cpu_load_average_5m"
        - "cpu_load_average_15m"
        - "cpu_context_switches_per_second"
        - "cpu_interrupts_per_second"
      
      memory_metrics:
        - "memory_usage_percent"
        - "memory_available_bytes"
        - "memory_cached_bytes"
        - "memory_buffers_bytes"
        - "swap_usage_percent"
        - "page_faults_per_second"
      
      disk_metrics:
        - "disk_usage_percent"
        - "disk_free_bytes"
        - "disk_read_bytes_per_second"
        - "disk_write_bytes_per_second"
        - "disk_read_operations_per_second"
        - "disk_write_operations_per_second"
        - "disk_average_queue_length"
      
      network_metrics:
        - "network_bytes_received_per_second"
        - "network_bytes_sent_per_second"
        - "network_packets_received_per_second"
        - "network_packets_sent_per_second"
        - "network_errors_per_second"
        - "network_dropped_packets_per_second"
    
    kubernetes_metrics:
      cluster_metrics:
        - "kubernetes_cluster_cpu_usage"
        - "kubernetes_cluster_memory_usage"
        - "kubernetes_node_count"
        - "kubernetes_pod_count"
        - "kubernetes_service_count"
        - "kubernetes_ingress_count"
      
      node_metrics:
        - "kubernetes_node_cpu_allocatable"
        - "kubernetes_node_memory_allocatable"
        - "kubernetes_node_pod_capacity"
        - "kubernetes_node_condition"
        - "kubernetes_node_age"
      
      pod_metrics:
        - "kubernetes_pod_cpu_usage"
        - "kubernetes_pod_memory_usage"
        - "kubernetes_pod_network_rx_bytes"
        - "kubernetes_pod_network_tx_bytes"
        - "kubernetes_pod_restart_count"
        - "kubernetes_pod_phase"
      
      deployment_metrics:
        - "kubernetes_deployment_replicas_desired"
        - "kubernetes_deployment_replicas_available"
        - "kubernetes_deployment_replicas_unavailable"
        - "kubernetes_deployment_updated_replicas"
    
    database_monitoring:
      postgresql_metrics:
        connection_metrics:
          - "postgresql_connections_active"
          - "postgresql_connections_idle"
          - "postgresql_connections_total"
          - "postgresql_max_connections"
        
        performance_metrics:
          - "postgresql_query_duration_seconds"
          - "postgresql_queries_per_second"
          - "postgresql_transactions_per_second"
          - "postgresql_rows_fetched_per_second"
          - "postgresql_rows_inserted_per_second"
          - "postgresql_rows_updated_per_second"
          - "postgresql_rows_deleted_per_second"
        
        resource_metrics:
          - "postgresql_database_size_bytes"
          - "postgresql_table_size_bytes"
          - "postgresql_index_size_bytes"
          - "postgresql_buffer_cache_hit_ratio"
          - "postgresql_checkpoint_write_time"
          - "postgresql_wal_files_count"
      
      monitoring_queries:
        slow_queries: |
          SELECT query, mean_time, calls, total_time, rows, 100.0 * shared_blks_hit /
          nullif(shared_blks_hit + shared_blks_read, 0) AS hit_percent
          FROM pg_stat_statements
          ORDER BY mean_time DESC
          LIMIT 20;
        
        blocking_queries: |
          SELECT blocked_locks.pid AS blocked_pid,
                 blocked_activity.usename AS blocked_user,
                 blocking_locks.pid AS blocking_pid,
                 blocking_activity.usename AS blocking_user,
                 blocked_activity.query AS blocked_statement,
                 blocking_activity.query AS current_statement_in_blocking_process
          FROM pg_catalog.pg_locks blocked_locks
          JOIN pg_catalog.pg_stat_activity blocked_activity ON blocked_activity.pid = blocked_locks.pid
          JOIN pg_catalog.pg_locks blocking_locks 
              ON blocking_locks.locktype = blocked_locks.locktype
              AND blocking_locks.DATABASE IS NOT DISTINCT FROM blocked_locks.DATABASE
              AND blocking_locks.relation IS NOT DISTINCT FROM blocked_locks.relation
          JOIN pg_catalog.pg_stat_activity blocking_activity ON blocking_activity.pid = blocking_locks.pid
          WHERE NOT blocked_locks.GRANTED;

  # Application Profiling
  application_profiling:
    continuous_profiling:
      enabled: true
      profiling_provider: "pyroscope"
      
      pyroscope_configuration:
        server_address: "http://pyroscope:4040"
        application_name: "hugai-${SERVICE_NAME}"
        
        profiling_types:
          - "cpu"
          - "memory"
          - "goroutines"
          - "mutex"
          - "block"
        
        sampling_configuration:
          cpu_sampling_rate: 100 # Hz
          memory_sampling_rate: 1024 # bytes
          profile_duration: 10 # seconds
          upload_interval: 15 # seconds
        
        tags:
          environment: "${ENVIRONMENT}"
          service: "${SERVICE_NAME}"
          version: "${SERVICE_VERSION}"
          datacenter: "${DATACENTER}"
      
      language_specific:
        python:
          profiler: "py-spy"
          configuration:
            duration: 30
            rate: 100
            subprocesses: true
            gil: true
            
            exclude_idle: true
            include_timestamp: true
            format: "flamegraph"
        
        javascript:
          profiler: "clinic.js"
          configuration:
            tools: ["doctor", "bubbleprof", "flame"]
            collect_on_failure: true
            heap_profiling: true
            
            sampling_interval: 10 # ms
            max_stack_depth: 128
        
        java:
          profiler: "async-profiler"
          configuration:
            events: ["cpu", "alloc", "lock"]
            interval: 10000000 # nanoseconds
            threads: true
            simple: false
            
            include: "com.hugai.*"
            exclude: "com.hugai.*.test.*"
        
        go:
          profiler: "pprof"
          configuration:
            cpu_profile_rate: 100
            memory_profile_rate: 4096
            mutex_profile_fraction: 1
            block_profile_rate: 1
            
            profile_types: ["heap", "goroutine", "threadcreate"]
    
    performance_analysis:
      flame_graph_generation: true
      call_graph_analysis: true
      memory_leak_detection: true
      
      analysis_triggers:
        - "cpu_usage > 80%"
        - "memory_usage > 85%"
        - "response_time_p95 > threshold"
        - "error_rate > 5%"
        - "manual_trigger"
      
      automated_recommendations:
        enabled: true
        confidence_threshold: 0.8
        
        recommendation_types:
          - "resource_optimization"
          - "algorithm_improvement"
          - "caching_opportunities"
          - "database_query_optimization"
          - "memory_usage_optimization"

  # Load Testing and Performance Validation
  load_testing:
    testing_framework: "k6"
    
    k6_configuration:
      version: "0.46.0"
      
      test_scenarios:
        baseline_load:
          executor: "constant-vus"
          vus: 50
          duration: "10m"
          
          thresholds:
            http_req_duration: ["p(95)<500"]
            http_req_failed: ["rate<0.01"]
            http_reqs: ["rate>100"]
        
        stress_test:
          executor: "ramping-vus"
          stages:
            - duration: "2m"
              target: 100
            - duration: "5m"
              target: 500
            - duration: "2m"
              target: 1000
            - duration: "5m"
              target: 1000
            - duration: "2m"
              target: 0
          
          thresholds:
            http_req_duration: ["p(95)<1000"]
            http_req_failed: ["rate<0.05"]
        
        spike_test:
          executor: "ramping-vus"
          stages:
            - duration: "1m"
              target: 100
            - duration: "30s"
              target: 2000
            - duration: "1m"
              target: 100
          
          thresholds:
            http_req_duration: ["p(95)<2000"]
            http_req_failed: ["rate<0.1"]
        
        endurance_test:
          executor: "constant-vus"
          vus: 200
          duration: "30m"
          
          thresholds:
            http_req_duration: ["p(95)<800"]
            http_req_failed: ["rate<0.02"]
            http_reqs: ["rate>150"]
      
      test_data_management:
        data_sources:
          - type: "csv"
            file: "test-users.csv"
            delimiter: ","
            
          - type: "json"
            file: "test-scenarios.json"
            
          - type: "api"
            url: "${TEST_DATA_API}/generate"
            headers:
              Authorization: "Bearer ${TEST_DATA_TOKEN}"
        
        data_parameterization:
          users: "random_selection"
          scenarios: "weighted_distribution"
          test_data_refresh: "per_iteration"
    
    performance_budgets:
      response_time_budgets:
        api_endpoints:
          "/api/v1/agents/*/tasks": "< 500ms p95"
          "/api/v1/projects/*/analyze": "< 2s p95"
          "/api/v1/code/generate": "< 10s p95"
        
        web_pages:
          "/dashboard": "< 2s LCP"
          "/projects": "< 1.5s LCP"
          "/settings": "< 1s LCP"
      
      resource_budgets:
        cpu_usage: "< 70% average"
        memory_usage: "< 80% peak"
        disk_io: "< 1000 IOPS"
        network_bandwidth: "< 100 Mbps"
      
      user_experience_budgets:
        first_contentful_paint: "< 1.5s"
        largest_contentful_paint: "< 2.5s"
        first_input_delay: "< 100ms"
        cumulative_layout_shift: "< 0.1"
        time_to_interactive: "< 3.5s"

  # Real User Monitoring (RUM)
  real_user_monitoring:
    browser_monitoring:
      enabled: true
      sample_rate: 1.0 # 100% for critical apps
      
      core_web_vitals:
        - "largest_contentful_paint"
        - "first_input_delay"
        - "cumulative_layout_shift"
        - "first_contentful_paint"
        - "time_to_interactive"
      
      custom_metrics:
        - name: "feature_load_time"
          element_selector: ".main-feature"
          measurement_type: "navigation_timing"
        
        - name: "user_interaction_delay"
          event_type: "click"
          target_selectors: [".button", ".link"]
        
        - name: "error_boundary_triggers"
          error_type: "javascript_error"
          component_boundary: "react_error_boundary"
      
      session_replay:
        enabled: true
        sample_rate: 0.1 # 10% of sessions
        
        privacy_settings:
          mask_text: true
          mask_inputs: true
          mask_images: false
          
          block_selectors: [".sensitive-data", ".payment-info"]
          ignore_selectors: [".non-essential"]
        
        storage_settings:
          retention_days: 30
          max_session_duration: 3600 # 1 hour
          replay_quality: "medium"
    
    mobile_monitoring:
      enabled: true
      platforms: ["ios", "android"]
      
      crash_reporting:
        symbolication: true
        deobfuscation: true
        breadcrumbs: true
        
        custom_metadata:
          - "user_id"
          - "session_id"
          - "feature_flags"
          - "experiment_groups"
      
      performance_monitoring:
        app_launch_time: true
        screen_load_time: true
        network_performance: true
        
        custom_timers:
          - "ai_processing_time"
          - "offline_sync_duration"
          - "cache_refresh_time"

  # Alerting and Anomaly Detection
  performance_alerting:
    anomaly_detection:
      machine_learning_models:
        enabled: true
        training_data_period: "30_days"
        detection_sensitivity: "medium"
        
        algorithms:
          - "isolation_forest"
          - "lstm_autoencoder"
          - "seasonal_hybrid_esd"
        
        features:
          - "response_time_patterns"
          - "error_rate_trends"
          - "resource_utilization_cycles"
          - "user_traffic_patterns"
      
      threshold_based_alerts:
        static_thresholds:
          high_response_time:
            metric: "http_request_duration_p95"
            threshold: "> 1s"
            duration: "5m"
            severity: "warning"
          
          high_error_rate:
            metric: "http_request_error_rate"
            threshold: "> 5%"
            duration: "2m"
            severity: "critical"
          
          high_cpu_usage:
            metric: "cpu_usage_percent"
            threshold: "> 80%"
            duration: "10m"
            severity: "warning"
        
        dynamic_thresholds:
          response_time_deviation:
            metric: "http_request_duration_p95"
            algorithm: "seasonal_decomposition"
            deviation_factor: 2.0
            minimum_threshold: "500ms"
          
          traffic_anomaly:
            metric: "http_requests_per_second"
            algorithm: "isolation_forest"
            confidence_level: 0.95
    
    alert_escalation:
      escalation_policies:
        performance_degradation:
          level_1:
            recipients: ["on_call_engineer"]
            methods: ["slack", "email"]
            timeout: "15m"
          
          level_2:
            recipients: ["team_lead", "on_call_engineer"]
            methods: ["slack", "phone"]
            timeout: "30m"
          
          level_3:
            recipients: ["engineering_manager", "cto"]
            methods: ["phone", "sms"]
        
        critical_performance_issues:
          level_1:
            recipients: ["on_call_engineer", "team_lead"]
            methods: ["phone", "slack", "pagerduty"]
            timeout: "5m"
          
          level_2:
            recipients: ["engineering_manager", "incident_commander"]
            methods: ["phone", "slack"]

integration:
  # CI/CD Integration
  performance_testing_integration:
    pipeline_integration:
      pre_deployment_tests:
        - "smoke_performance_test"
        - "regression_performance_test"
        - "security_performance_test"
      
      post_deployment_validation:
        - "production_health_check"
        - "performance_baseline_validation"
        - "user_experience_validation"
      
      performance_gates:
        deployment_blocker_thresholds:
          response_time_regression: "> 20%"
          error_rate_increase: "> 2%"
          resource_usage_increase: "> 30%"
        
        performance_budget_validation:
          core_web_vitals: "all_metrics_within_budget"
          api_performance: "all_endpoints_within_sla"

  # Incident Management Integration
  incident_integration:
    automated_incident_creation:
      performance_incidents:
        trigger_conditions:
          - "critical_performance_alert_active > 5m"
          - "multiple_performance_alerts_active"
          - "user_experience_degradation_detected"
        
        incident_data:
          severity: "auto_calculated_based_on_impact"
          components: "auto_detected_from_metrics"
          timeline: "auto_generated_from_alerts"
    
    performance_runbooks:
      high_response_time_runbook:
        steps:
          - "check_current_traffic_levels"
          - "analyze_recent_deployments"
          - "review_database_performance"
          - "check_external_dependencies"
          - "scale_resources_if_needed"
      
      memory_leak_runbook:
        steps:
          - "capture_memory_profile"
          - "analyze_heap_dump"
          - "identify_leak_sources"
          - "implement_temporary_mitigation"
          - "schedule_permanent_fix"

validation:
  # Performance Validation
  performance_validation:
    monitoring_accuracy: ">95%"
    alert_precision: ">90%"
    data_freshness: "<30_seconds"
    dashboard_availability: ">99.9%"
  
  # System Impact Validation
  monitoring_overhead:
    cpu_overhead: "<3%"
    memory_overhead: "<5%"
    network_overhead: "<1%"
    storage_overhead: "minimal"

examples:
  # Performance Test Configuration
  load_test_example:
    test_name: "hugai_api_load_test"
    configuration: |
      import http from 'k6/http';
      import { check, sleep } from 'k6';
      
      export const options = {
        stages: [
          { duration: '2m', target: 100 },
          { duration: '5m', target: 100 },
          { duration: '2m', target: 200 },
          { duration: '5m', target: 200 },
          { duration: '2m', target: 0 },
        ],
        thresholds: {
          http_req_duration: ['p(99)<1500'],
          http_req_failed: ['rate<0.1'],
        },
      };
      
      export default function () {
        const response = http.post('${HUGAI_API_URL}/tasks', {
          agent_type: 'requirements-analyzer',
          task_data: { /* test data */ }
        });
        
        check(response, {
          'status was 200': (r) => r.status == 200,
          'transaction time OK': (r) => r.timings.duration < 1000,
        });
        
        sleep(1);
      }

# CLI Usage Examples
cli_usage: |
  # Initialize performance monitoring
  hugai performance init --provider datadog --enable-profiling --enable-rum
  
  # Run load test
  hugai performance test load --scenario baseline --duration 10m --target-vus 100
  
  # Monitor application performance
  hugai performance monitor --service hugai-api --metrics response-time,error-rate --real-time
  
  # Generate performance report
  hugai performance report --period weekly --format html --include-recommendations
  
  # Configure performance alerts
  hugai performance alerts configure --metric response-time --threshold 500ms --duration 5m
  
  # Profile application
  hugai performance profile --service hugai-agent --duration 30s --type cpu,memory