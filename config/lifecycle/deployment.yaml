metadata:
  name: deployment-phase
  version: 1.0.0
  description: "Deployment phase configuration for HUGAI development lifecycle"
  category: lifecycle-phase
  phase_order: 5
  dependencies:
    - deployment-agent
    - devops-agent
    - security-agent
    - observability-monitoring-agent
    - testing-quality-assurance-phase
  tags:
    - deployment
    - infrastructure-as-code
    - ci-cd
    - release-management
    - automation

configuration:
  # Phase Overview
  phase_definition:
    name: "Deployment"
    objective: "Automate the release process, ensure reliable rollouts, and maintain system stability through AI-assisted pipelines and human oversight"
    duration_estimate: "1-4 weeks"
    complexity_factors: [infrastructure_complexity, deployment_strategy, environment_count, integration_dependencies]
  
  # Phase Objectives
  objectives:
    infrastructure_automation:
      description: "Automate infrastructure provisioning and environment configuration"
      success_criteria:
        - "Infrastructure-as-Code templates for all environments"
        - "Automated environment provisioning and configuration"
        - "Consistent infrastructure across all deployment targets"
        - "Scalable and maintainable infrastructure patterns"
      
    deployment_strategy_implementation:
      description: "Define and implement deployment strategies (blue-green, canary, rolling updates)"
      success_criteria:
        - "Deployment strategy selected and configured"
        - "Safe rollout mechanisms implemented"
        - "Traffic routing and load balancing configured"
        - "A/B testing capabilities enabled where applicable"
      
    zero_downtime_releases:
      description: "Ensure zero-downtime releases and reliable rollback mechanisms"
      success_criteria:
        - "Zero-downtime deployment capability verified"
        - "Automated rollback procedures tested and validated"
        - "Health checks and readiness probes configured"
        - "Database migration strategies implemented"
      
    environment_consistency:
      description: "Validate configuration consistency and dependency management across environments"
      success_criteria:
        - "Configuration drift detection and remediation"
        - "Dependency versions locked and validated"
        - "Environment parity maintained between staging and production"
        - "Secrets and configuration management automated"
  
  # AI Agent Configuration
  ai_agents:
    deployment_agent:
      role: "Primary deployment automation and orchestration"
      responsibilities:
        - "Generate Infrastructure-as-Code templates"
        - "Create CI/CD pipeline definitions"
        - "Implement deployment strategies and rollback plans"
        - "Configure environment-specific deployments"
      inputs: ["application_artifacts", "infrastructure_requirements", "deployment_specifications"]
      outputs: ["iac_templates", "deployment_pipelines", "rollback_procedures"]
      
    devops_agent:
      role: "CI/CD workflow orchestration and monitoring"
      responsibilities:
        - "Orchestrate CI/CD workflows and pipeline execution"
        - "Monitor deployment progress and health metrics"
        - "Integrate observability and monitoring tools"
        - "Manage artifact repositories and dependencies"
      inputs: ["deployment_plans", "monitoring_requirements", "pipeline_configurations"]
      outputs: ["cicd_workflows", "monitoring_integrations", "deployment_reports"]
      
    security_agent:
      role: "Deployment security validation and compliance"
      responsibilities:
        - "Validate deployment security configurations"
        - "Scan infrastructure and container images"
        - "Ensure compliance with security policies"
        - "Implement security controls in deployment pipeline"
      inputs: ["deployment_artifacts", "security_policies", "compliance_requirements"]
      outputs: ["security_validations", "compliance_reports", "security_configurations"]
      
    observability_monitoring_agent:
      role: "Deployment monitoring and alerting setup"
      responsibilities:
        - "Configure deployment monitoring and alerting"
        - "Set up health checks and readiness probes"
        - "Implement observability dashboards"
        - "Configure automated incident response"
      inputs: ["application_metrics", "sla_requirements", "monitoring_specifications"]
      outputs: ["monitoring_configurations", "alert_rules", "observability_dashboards"]
  
  # Human Participants
  human_participants:
    operations_engineer:
      role: "Deployment planning and authorization"
      responsibilities:
        - "Review and approve deployment plans"
        - "Validate infrastructure configurations"
        - "Authorize production deployments"
        - "Coordinate deployment schedules and maintenance windows"
      checkpoints: ["pre_deployment_approval", "production_go_no_go"]
      
    site_reliability_engineer:
      role: "Production monitoring and incident response"
      responsibilities:
        - "Monitor production rollouts and system health"
        - "Validate SLA compliance during deployments"
        - "Coordinate incident response and recovery"
        - "Optimize deployment processes based on metrics"
      checkpoints: ["staging_validation", "production_monitoring"]
      
    security_engineer:
      role: "Security validation and compliance oversight"
      responsibilities:
        - "Validate deployment security configurations"
        - "Review container and infrastructure security"
        - "Ensure compliance with security policies"
        - "Approve security-critical deployments"
      checkpoints: ["security_validation", "compliance_verification"]
      
    release_manager:
      role: "Release coordination and communication"
      responsibilities:
        - "Coordinate cross-team release activities"
        - "Manage release communications and notifications"
        - "Track release metrics and success criteria"
        - "Facilitate release retrospectives and improvements"
      checkpoints: ["release_coordination", "stakeholder_communication"]
  
  # Deployment Strategies
  deployment_strategies:
    blue_green:
      description: "Maintain two identical production environments, switching traffic between them"
      use_cases: ["zero_downtime_requirements", "instant_rollback_needs", "database_migrations"]
      benefits: ["instant_rollback", "reduced_risk", "full_testing_in_production_environment"]
      considerations: ["double_infrastructure_cost", "database_synchronization", "stateful_services"]
      
    canary:
      description: "Gradually route traffic to new version while monitoring metrics"
      use_cases: ["risk_mitigation", "performance_validation", "user_feedback_collection"]
      traffic_splitting: [5, 10, 25, 50, 100]
      success_criteria:
        error_rate: "<1%"
        latency_p95: "<500ms"
        cpu_utilization: "<80%"
      rollback_triggers:
        error_rate: ">5%"
        latency_p95: ">1000ms"
        
    rolling_update:
      description: "Gradually replace old instances with new ones"
      use_cases: ["resource_constrained_environments", "gradual_rollouts", "stateless_applications"]
      configuration:
        max_unavailable: "25%"
        max_surge: "25%"
        readiness_probe_required: true
        
    feature_flags:
      description: "Deploy code but control feature activation via configuration"
      use_cases: ["gradual_feature_rollout", "a_b_testing", "instant_feature_toggle"]
      benefits: ["decoupled_deployment_and_release", "instant_rollback", "targeted_user_groups"]
  
  # Key Artifacts & Deliverables
  artifacts:
    infrastructure_as_code_templates:
      description: "Complete IaC templates for all environments and services"
      formats: ["terraform", "cloudformation", "pulumi", "ansible"]
      organization: "environment_and_service_based"
      quality_criteria:
        - "All infrastructure components defined as code"
        - "Environment-specific configurations parameterized"
        - "Version control and change tracking enabled"
        - "Security best practices implemented"
      
    cicd_pipeline_definitions:
      description: "Comprehensive CI/CD pipeline configurations"
      platforms: ["github_actions", "gitlab_ci", "jenkins", "azure_devops"]
      stages: ["build", "test", "security_scan", "deploy", "monitor"]
      quality_criteria:
        - "Pipeline stages clearly defined and documented"
        - "Quality gates and approval processes implemented"
        - "Artifact management and versioning automated"
        - "Rollback procedures integrated"
      
    deployment_runbooks:
      description: "Operational procedures and troubleshooting guides"
      format: "markdown"
      content:
        - "Step-by-step deployment procedures"
        - "Health check and validation steps"
        - "Troubleshooting guides and common issues"
        - "Emergency response and escalation procedures"
      
    rollback_procedures:
      description: "Automated and manual rollback plans"
      types: ["automated_rollback", "manual_rollback", "emergency_procedures"]
      quality_criteria:
        - "Rollback procedures tested and validated"
        - "Data consistency and integrity maintained"
        - "Minimal downtime during rollback"
        - "Clear rollback decision criteria defined"
      
    environment_inventory:
      description: "Complete inventory of environments and their configurations"
      format: "yaml"
      content:
        - "Environment specifications and purposes"
        - "Resource allocations and capacity limits"
        - "Access controls and security configurations"
        - "Dependency mappings and service catalogs"
  
  # Governance Checkpoints
  governance_checkpoints:
    pre_deployment_approval:
      type: "human_checkpoint"
      description: "Review and authorization of deployment plan and environment readiness"
      participants: ["operations_engineer", "release_manager", "security_engineer"]
      entry_criteria:
        - "All tests passed in staging environment"
        - "Security scans completed successfully"
        - "Deployment plan reviewed and approved"
      exit_criteria:
        - "Deployment authorized by operations team"
        - "Risk assessment completed and accepted"
        - "Rollback procedures validated"
      duration: "1-2 hours"
      
    staging_validation:
      type: "automated_gate"
      description: "Comprehensive validation in staging environment"
      validation_rules:
        - "All smoke tests pass"
        - "Performance benchmarks met"
        - "Security scans pass"
        - "Integration tests successful"
      manual_validation:
        participants: ["sre", "qa_engineer"]
        duration: "30 minutes"
      
    production_go_no_go:
      type: "human_checkpoint"
      description: "Final authorization for production deployment"
      participants: ["operations_engineer", "sre", "release_manager"]
      entry_criteria:
        - "Staging validation completed successfully"
        - "All stakeholders notified"
        - "Maintenance window scheduled if required"
      exit_criteria:
        - "Production deployment authorized"
        - "Monitoring and alerting confirmed active"
        - "Support teams on standby"
      duration: "30 minutes"
      
    rollback_drill:
      type: "scheduled_exercise"
      description: "Regular validation of rollback and recovery procedures"
      frequency: "monthly"
      participants: ["operations_team", "sre_team", "development_team"]
      scenarios: ["application_rollback", "database_rollback", "infrastructure_recovery"]
      success_criteria:
        - "Rollback completed within target time"
        - "System functionality fully restored"
        - "No data loss or corruption"
  
  # Environment Management
  environment_management:
    environment_types:
      development:
        purpose: "Developer testing and integration"
        deployment_automation: "full"
        resource_allocation: "minimal"
        data_strategy: "synthetic_data"
        
      staging:
        purpose: "Pre-production validation and testing"
        deployment_automation: "full"
        resource_allocation: "production_like"
        data_strategy: "anonymized_production_data"
        
      production:
        purpose: "Live system serving end users"
        deployment_automation: "human_approved"
        resource_allocation: "optimized"
        data_strategy: "live_data"
        
    environment_promotion:
      strategy: "artifact_promotion"
      validation_required: true
      configuration_drift_detection: true
      automated_testing: "comprehensive"
  
  # Metrics & Quality Gates
  metrics:
    deployment_success_rate:
      description: "Percentage of successful deployments vs. attempts"
      target: ">98%"
      calculation: "successful_deployments / total_deployment_attempts * 100"
      alert_threshold: "<95%"
      
    mean_time_to_deploy:
      description: "Average time to complete a deployment"
      target: "<30 minutes"
      calculation: "total_deployment_time / number_of_deployments"
      alert_threshold: ">60 minutes"
      
    mean_time_to_recovery:
      description: "Time to restore service after a failure"
      target: "<15 minutes"
      calculation: "recovery_time_from_failure_detection"
      alert_threshold: ">30 minutes"
      
    configuration_drift_rate:
      description: "Instances of environment configuration drift detected"
      target: "<5%"
      calculation: "drifted_configurations / total_configurations * 100"
      alert_threshold: ">10%"
      
    change_failure_rate:
      description: "Proportion of deployments causing incidents"
      target: "<5%"
      calculation: "failed_deployments / total_deployments * 100"
      alert_threshold: ">10%"
      
    rollback_frequency:
      description: "Percentage of deployments requiring rollback"
      target: "<2%"
      calculation: "rollbacks / total_deployments * 100"
      alert_threshold: ">5%"

integration:
  # Infrastructure Platform Integration
  infrastructure_platforms:
    aws:
      services: ["ec2", "ecs", "eks", "lambda", "rds", "s3"]
      iac_tools: ["terraform", "cloudformation", "cdk"]
      monitoring: ["cloudwatch", "x_ray"]
      
    azure:
      services: ["vm", "aks", "app_service", "sql_database", "storage"]
      iac_tools: ["terraform", "arm_templates", "bicep"]
      monitoring: ["azure_monitor", "application_insights"]
      
    gcp:
      services: ["compute_engine", "gke", "cloud_run", "cloud_sql"]
      iac_tools: ["terraform", "deployment_manager"]
      monitoring: ["cloud_monitoring", "cloud_trace"]
  
  # CI/CD Platform Integration
  cicd_platforms:
    github_actions:
      deployment_workflows: "automated"
      secrets_management: "github_secrets"
      environment_protection: "branch_protection_rules"
      
    gitlab_ci:
      deployment_pipelines: "yaml_based"
      environment_management: "built_in"
      monitoring_integration: "prometheus"
      
    jenkins:
      pipeline_as_code: "jenkinsfile"
      plugin_ecosystem: "extensive"
      multi_branch_support: "enabled"
  
  # Monitoring and Observability
  observability_integration:
    prometheus:
      metrics_collection: "application_and_infrastructure"
      alerting: "alertmanager"
      visualization: "grafana"
      
    elk_stack:
      log_aggregation: "elasticsearch"
      log_processing: "logstash"
      visualization: "kibana"
      
    datadog:
      apm: "application_performance_monitoring"
      infrastructure_monitoring: "comprehensive"
      synthetic_monitoring: "enabled"

validation:
  # Pre-Deployment Validation
  pre_deployment_validation:
    artifact_quality:
      build_success: "verified"
      test_results: "all_tests_passed"
      security_scans: "no_critical_vulnerabilities"
      
    environment_readiness:
      infrastructure_provisioned: "verified"
      dependencies_available: "validated"
      configuration_applied: "confirmed"
      
    deployment_plan:
      strategy_defined: "clear_and_approved"
      rollback_plan: "tested_and_ready"
      communication_plan: "stakeholders_notified"
  
  # Deployment Execution Validation
  execution_validation:
    deployment_progress:
      health_checks: "passing"
      metrics_within_thresholds: "validated"
      error_rates: "acceptable"
      
    rollout_control:
      traffic_routing: "correctly_configured"
      canary_metrics: "monitored"
      rollback_triggers: "active"
      
    system_stability:
      resource_utilization: "optimal"
      response_times: "within_sla"
      error_rates: "below_threshold"
  
  # Post-Deployment Validation
  post_deployment_validation:
    functionality_verification:
      smoke_tests: "passed"
      critical_path_validation: "successful"
      integration_testing: "completed"
      
    performance_validation:
      response_times: "meet_sla_requirements"
      throughput: "meets_capacity_requirements"
      resource_usage: "within_expected_ranges"
      
    monitoring_validation:
      metrics_collection: "active"
      alerting: "functional"
      dashboards: "updated"

examples:
  # Microservices Deployment
  microservices_deployment:
    project: "E-commerce Platform"
    architecture: "microservices"
    deployment_strategy: "canary"
    
    infrastructure_template: |
      # Terraform configuration for microservices deployment
      resource "aws_ecs_cluster" "main" {
        name = "ecommerce-cluster"
        
        setting {
          name  = "containerInsights"
          value = "enabled"
        }
      }
      
      resource "aws_ecs_service" "user_service" {
        name            = "user-service"
        cluster         = aws_ecs_cluster.main.id
        task_definition = aws_ecs_task_definition.user_service.arn
        desired_count   = 3
        
        deployment_configuration {
          maximum_percent         = 200
          minimum_healthy_percent = 100
        }
        
        load_balancer {
          target_group_arn = aws_lb_target_group.user_service.arn
          container_name   = "user-service"
          container_port   = 8080
        }
      }
    
    cicd_pipeline: |
      # GitHub Actions workflow for microservices deployment
      name: Deploy User Service
      
      on:
        push:
          branches: [main]
          paths: ['services/user-service/**']
      
      jobs:
        deploy:
          runs-on: ubuntu-latest
          steps:
            - uses: actions/checkout@v3
            
            - name: Build and test
              run: |
                cd services/user-service
                npm ci
                npm test
                npm run build
            
            - name: Security scan
              uses: snyk/actions/node@master
              env:
                SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
            
            - name: Build Docker image
              run: |
                docker build -t user-service:${{ github.sha }} services/user-service/
            
            - name: Deploy to staging
              run: |
                aws ecs update-service --cluster ecommerce-staging --service user-service \
                  --task-definition user-service:${{ github.sha }}
            
            - name: Run smoke tests
              run: |
                npm run test:smoke -- --environment staging
            
            - name: Deploy to production (canary)
              if: success()
              run: |
                # Deploy to 10% of traffic initially
                aws ecs update-service --cluster ecommerce-prod --service user-service-canary \
                  --task-definition user-service:${{ github.sha }} --desired-count 1
  
  # Database Migration Deployment
  database_migration_deployment:
    project: "Legacy System Modernization"
    deployment_strategy: "blue_green_with_migration"
    
    migration_strategy: |
      # Database migration deployment strategy
      1. Pre-deployment:
         - Backup production database
         - Validate migration scripts in staging
         - Prepare rollback scripts
      
      2. Blue-Green Setup:
         - Deploy new version to green environment
         - Run migration scripts on green database
         - Validate data integrity
      
      3. Traffic Switch:
         - Gradually route read traffic to green
         - Monitor application performance
         - Switch write traffic after validation
      
      4. Cleanup:
         - Monitor for 24 hours
         - Decommission blue environment
         - Archive backup data
    
    rollback_procedure: |
      # Automated rollback procedure
      1. Immediate Actions:
         - Switch traffic back to blue environment
         - Stop all write operations to green database
         - Activate incident response team
      
      2. Data Recovery:
         - Assess data written to green during deployment
         - Replay critical transactions to blue database
         - Validate data consistency
      
      3. System Restoration:
         - Verify all services running on blue
         - Run post-rollback health checks
         - Communicate status to stakeholders

# CLI Usage Examples
cli_usage: |
  # Initialize deployment phase
  hugai lifecycle start deployment --testing-complete --environment production
  
  # Generate infrastructure templates
  hugai deploy infra generate --platform aws --services ecs,rds,redis --output infrastructure/
  
  # Create deployment pipeline
  hugai deploy pipeline create --strategy canary --environments staging,production
  
  # Execute deployment
  hugai deploy execute --environment staging --artifact app:v1.2.3 --strategy rolling
  
  # Monitor deployment progress
  hugai deploy monitor --deployment-id dep-123 --real-time --alerts
  
  # Perform rollback
  hugai deploy rollback --deployment-id dep-123 --reason "high_error_rate" --immediate
  
  # Run governance checkpoints
  hugai checkpoint run pre-deployment-approval --deployment-plan deploy-plan.yaml
  
  # Validate environment consistency
  hugai deploy validate --environments staging,production --check drift,config,security
  
  # Generate deployment report
  hugai deploy report --period last-month --metrics success-rate,mttr,mttd --format pdf