metadata:
  name: implementation-phase
  version: 1.0.0
  description: "Implementation phase configuration for HUGAI development lifecycle"
  category: lifecycle-phase
  phase_order: 3
  dependencies:
    - implementation-agent
    - documentation-writer-agent
    - internal-reviewer-agent
    - security-agent
    - design-architecture-phase
  tags:
    - implementation
    - code-generation
    - refactoring
    - documentation
    - quality-assurance

configuration:
  # Phase Overview
  phase_definition:
    name: "Implementation"
    objective: "Accelerate code delivery with AI-generated scaffolding, real-time suggestions, and automated documentation while ensuring quality and governance"
    duration_estimate: "4-12 weeks"
    complexity_factors: [codebase_size, technology_stack, integration_complexity, team_experience]
  
  # Phase Objectives
  objectives:
    code_generation:
      description: "Generate code scaffolding and refactor legacy code based on design artifacts"
      success_criteria:
        - "Code modules generated according to architecture specifications"
        - "Legacy code refactored to meet current standards"
        - "Framework scaffolding created for rapid development"
        - "Code generation templates optimized for project patterns"
      
    real_time_assistance:
      description: "Provide real-time coding suggestions, refactoring hints, and code completion"
      success_criteria:
        - "IDE integration providing contextual suggestions"
        - "Real-time code quality feedback"
        - "Automated refactoring recommendations"
        - "Intelligent code completion based on project context"
      
    documentation_automation:
      description: "Automate inline and external documentation updates for code modules"
      success_criteria:
        - "All public APIs automatically documented"
        - "Inline code comments generated and maintained"
        - "README files updated with implementation details"
        - "API documentation synchronized with code changes"
      
    standards_enforcement:
      description: "Enforce coding standards, security guidelines, and best practices"
      success_criteria:
        - "Coding standards automatically applied"
        - "Security guidelines enforced at code level"
        - "Best practices patterns consistently implemented"
        - "Technical debt minimized through automation"
      
    integration_quality:
      description: "Integrate generated code into existing codebases with minimal disruption"
      success_criteria:
        - "Seamless integration with existing systems"
        - "Minimal breaking changes to existing functionality"
        - "Backward compatibility maintained"
        - "Clean integration points established"
  
  # AI Agent Configuration
  ai_agents:
    implementation_agent:
      role: "Primary code generation and scaffolding"
      responsibilities:
        - "Generate code modules based on architecture specifications"
        - "Create framework scaffolding and boilerplate code"
        - "Implement design patterns and architectural decisions"
        - "Perform automated refactoring and code optimization"
      inputs: ["architecture_specifications", "design_patterns", "coding_standards"]
      outputs: ["generated_code_modules", "scaffolding_frameworks", "refactored_code"]
      
    documentation_writer_agent:
      role: "Automated documentation generation and maintenance"
      responsibilities:
        - "Generate inline code comments and docstrings"
        - "Create and update API documentation"
        - "Maintain README files and implementation guides"
        - "Synchronize documentation with code changes"
      inputs: ["generated_code", "api_specifications", "code_changes"]
      outputs: ["inline_documentation", "api_docs", "implementation_guides"]
      
    internal_reviewer_agent:
      role: "Automated code review and quality assurance"
      responsibilities:
        - "Review generated code for quality and standards compliance"
        - "Identify potential issues and improvement opportunities"
        - "Validate code against architectural guidelines"
        - "Generate code review feedback and suggestions"
      inputs: ["generated_code", "coding_standards", "quality_metrics"]
      outputs: ["code_review_feedback", "quality_assessment", "improvement_recommendations"]
      
    security_agent:
      role: "Security validation and vulnerability detection"
      responsibilities:
        - "Scan generated code for security vulnerabilities"
        - "Validate compliance with security guidelines"
        - "Identify potential security risks in implementation"
        - "Recommend security improvements and mitigations"
      inputs: ["generated_code", "security_policies", "vulnerability_databases"]
      outputs: ["security_assessment", "vulnerability_reports", "security_recommendations"]
  
  # Human Participants
  human_participants:
    software_developers:
      role: "Code review, integration, and enhancement"
      responsibilities:
        - "Review and validate AI-generated code"
        - "Integrate generated code with existing systems"
        - "Enhance and customize code based on specific requirements"
        - "Provide feedback on code quality and functionality"
      checkpoints: ["code_integration_review", "functionality_validation"]
      
    code_reviewer:
      role: "Quality assurance and standards enforcement"
      responsibilities:
        - "Conduct thorough code reviews of AI-generated code"
        - "Validate adherence to architecture and coding standards"
        - "Ensure code quality and maintainability"
        - "Approve code for merge and deployment"
      checkpoints: ["pre_merge_review", "architecture_compliance_check"]
      
    security_engineer:
      role: "Security validation and compliance"
      responsibilities:
        - "Review generated code for security vulnerabilities"
        - "Validate compliance with security policies"
        - "Ensure secure coding practices are followed"
        - "Approve security-critical code changes"
      checkpoints: ["security_gate", "vulnerability_assessment"]
      
    tech_lead:
      role: "Technical oversight and decision making"
      responsibilities:
        - "Guide technical implementation decisions"
        - "Resolve technical conflicts and issues"
        - "Ensure alignment with overall system architecture"
        - "Approve significant technical changes"
      checkpoints: ["technical_decision_review", "architecture_alignment_check"]
  
  # Key Artifacts & Deliverables
  artifacts:
    generated_code_modules:
      description: "Complete code modules, classes, and functions organized by feature"
      format: "source_code"
      organization: "feature_based"
      quality_criteria:
        - "Code follows established patterns and conventions"
        - "All modules have clear responsibilities and interfaces"
        - "Code is well-structured and maintainable"
        - "Performance and scalability considerations addressed"
      
    updated_documentation:
      description: "Comprehensive inline and external documentation"
      formats: ["inline_comments", "api_docs", "readme_files"]
      quality_criteria:
        - "All public APIs fully documented"
        - "Code comments explain complex logic and decisions"
        - "Documentation is accurate and up-to-date"
        - "Examples and usage guides provided"
      
    pull_request_branches:
      description: "Feature branches containing AI-generated changes"
      naming_convention: "feature/ai-generated-{feature-name}"
      structure:
        - "Clear commit messages describing changes"
        - "Comprehensive PR descriptions"
        - "Links to related issues and requirements"
        - "Test results and quality metrics"
      
    quality_reports:
      description: "Linting, static analysis, and code quality reports"
      formats: ["json", "html", "xml"]
      content:
        - "Style and formatting compliance"
        - "Potential bugs and code smells"
        - "Security vulnerability assessments"
        - "Performance analysis results"
      
    refactoring_logs:
      description: "Detailed logs of automated code changes and refactoring"
      format: "structured_log"
      content:
        - "Changes made and rationale"
        - "Impact analysis and risk assessment"
        - "Rollback procedures if needed"
        - "Performance impact measurement"
  
  # Governance Checkpoints
  governance_checkpoints:
    pre_merge_review:
      type: "human_checkpoint"
      description: "Mandatory human approval of AI-generated pull requests"
      participants: ["code_reviewer", "software_developers", "tech_lead"]
      entry_criteria:
        - "All automated tests passing"
        - "Code review feedback addressed"
        - "Documentation updated and complete"
      exit_criteria:
        - "Code approved by designated reviewers"
        - "All review comments resolved"
        - "Quality gates passed"
      duration: "1-4 hours"
      
    style_gate:
      type: "automated_gate"
      description: "Automated linting and formatting checks"
      validation_rules:
        - "Code follows established style guidelines"
        - "Linting rules pass without warnings"
        - "Formatting is consistent across codebase"
      tools: ["eslint", "prettier", "pylint", "black", "checkstyle"]
      blocking_conditions:
        - "Linting errors present"
        - "Formatting inconsistencies"
        - "Style guide violations"
      
    security_gate:
      type: "automated_gate"
      description: "Static code analysis and vulnerability scans"
      validation_rules:
        - "No critical security vulnerabilities"
        - "Security best practices followed"
        - "Dependency vulnerabilities addressed"
      tools: ["sonarqube", "codeql", "snyk", "semgrep"]
      blocking_conditions:
        - "Critical vulnerabilities detected"
        - "Security policy violations"
        - "Unsafe coding patterns identified"
      
    documentation_gate:
      type: "automated_gate"
      description: "Documentation completeness validation"
      validation_rules:
        - "All public APIs documented"
        - "Code comments present for complex logic"
        - "README files updated with changes"
      blocking_conditions:
        - "Undocumented public APIs"
        - "Missing implementation documentation"
        - "Outdated documentation detected"
  
  # Code Generation Strategy
  code_generation_strategy:
    scaffolding_approach:
      framework_scaffolding: "template_based"
      component_generation: "pattern_driven"
      boilerplate_automation: "comprehensive"
      
    quality_standards:
      coding_conventions: "project_specific"
      design_patterns: "architectural_alignment"
      performance_optimization: "automated"
      
    integration_strategy:
      existing_code_integration: "minimal_disruption"
      dependency_management: "automated"
      version_control: "feature_branch_workflow"
  
  # Development Workflow
  development_workflow:
    feature_development:
      - task_analysis: "Break down requirements into implementable tasks"
      - code_generation: "Generate initial code scaffolding"
      - iterative_refinement: "Refine and enhance generated code"
      - testing_integration: "Integrate with test suite"
      - documentation_update: "Update all relevant documentation"
      - review_process: "Conduct comprehensive code review"
      
    refactoring_workflow:
      - technical_debt_analysis: "Identify refactoring opportunities"
      - impact_assessment: "Analyze potential impacts of changes"
      - automated_refactoring: "Apply safe automated refactoring"
      - validation_testing: "Validate functionality preservation"
      - performance_verification: "Ensure performance maintained"
  
  # Metrics & Quality Gates
  metrics:
    code_acceptance_rate:
      description: "Percentage of AI-generated code accepted without modification"
      target: ">70%"
      calculation: "accepted_code_lines / total_generated_lines * 100"
      alert_threshold: "<50%"
      
    lint_compliance:
      description: "Rate of passing automated style and lint checks"
      target: ">95%"
      calculation: "passing_lint_checks / total_lint_checks * 100"
      alert_threshold: "<85%"
      
    test_coverage_impact:
      description: "Change in code coverage after merging generated code"
      target: "maintained_or_improved"
      calculation: "new_coverage - baseline_coverage"
      alert_threshold: "<-5%"
      
    refactoring_success_rate:
      description: "Percentage of automated refactorings that reduce technical debt"
      target: ">80%"
      calculation: "successful_refactorings / total_refactorings * 100"
      alert_threshold: "<60%"
      
    review_turnaround_time:
      description: "Average time to review AI-generated pull requests"
      target: "<24 hours"
      calculation: "total_review_time / number_of_prs"
      alert_threshold: ">72 hours"
      
    documentation_coverage:
      description: "Percentage of code with adequate documentation"
      target: ">90%"
      calculation: "documented_functions / total_functions * 100"
      alert_threshold: "<75%"
  
  # Quality Assurance
  quality_assurance:
    automated_testing:
      unit_tests: "comprehensive_coverage"
      integration_tests: "api_endpoint_coverage"
      performance_tests: "baseline_maintenance"
      
    code_analysis:
      static_analysis: "comprehensive_scanning"
      security_analysis: "vulnerability_detection"
      performance_analysis: "bottleneck_identification"
      
    manual_validation:
      functionality_testing: "feature_verification"
      usability_review: "user_experience_validation"
      integration_verification: "system_compatibility"

integration:
  # Development Environment Integration
  ide_integration:
    vscode:
      extensions: ["ai_code_assistant", "intelligent_suggestions"]
      configuration: "project_specific_settings"
      real_time_feedback: "enabled"
      
    intellij:
      plugins: ["ai_code_completion", "automated_refactoring"]
      code_analysis: "integrated"
      suggestion_engine: "context_aware"
      
    vim_neovim:
      plugins: ["coc_ai", "code_intelligence"]
      lsp_integration: "comprehensive"
  
  # CI/CD Integration
  cicd_pipelines:
    github_actions:
      workflows: ["code_generation", "quality_checks", "automated_review"]
      triggers: ["push", "pull_request", "schedule"]
      
    jenkins:
      pipeline_stages: ["generate", "test", "analyze", "deploy"]
      quality_gates: "integrated"
      
    gitlab_ci:
      templates: ["code_quality", "security_scan", "documentation"]
      artifact_management: "automated"
  
  # Quality Tools Integration
  quality_tools:
    sonarqube:
      quality_profiles: "project_specific"
      quality_gates: "customized"
      technical_debt_tracking: "enabled"
      
    codeql:
      security_analysis: "comprehensive"
      custom_queries: "project_specific"
      
    eslint_prettier:
      configuration: "shared_across_projects"
      auto_fix: "enabled"
  
  # Documentation Tools
  documentation_tools:
    sphinx:
      auto_documentation: "api_generation"
      themes: "customized"
      
    mkdocs:
      material_theme: "configured"
      plugins: ["search", "navigation"]
      
    javadoc:
      generation: "automated"
      styling: "corporate_branding"

validation:
  # Pre-Implementation Validation
  pre_implementation_validation:
    architecture_alignment:
      design_specifications: "complete_and_approved"
      technical_specifications: "detailed_and_feasible"
      resource_availability: "confirmed"
      
    development_readiness:
      environment_setup: "complete"
      tooling_configuration: "validated"
      team_preparation: "training_completed"
  
  # Implementation Quality Validation
  implementation_validation:
    code_quality:
      standards_compliance: "automated_validation"
      maintainability_score: ">7.0"
      complexity_metrics: "within_thresholds"
      
    functionality_validation:
      requirement_coverage: "100%"
      edge_case_handling: "comprehensive"
      error_handling: "robust"
      
    performance_validation:
      response_time_requirements: "met"
      throughput_targets: "achieved"
      resource_utilization: "optimized"
  
  # Integration Validation
  integration_validation:
    system_compatibility:
      existing_system_integration: "seamless"
      api_compatibility: "maintained"
      data_consistency: "verified"
      
    deployment_readiness:
      build_process: "successful"
      test_suite: "passing"
      documentation: "complete"

examples:
  # REST API Implementation
  rest_api_example:
    feature: "User Management API"
    technology_stack: ["Node.js", "Express", "MongoDB"]
    
    generated_artifacts:
      controller: |
        // Generated User Controller
        const express = require('express');
        const User = require('../models/User');
        const { validateUser, handleValidationErrors } = require('../middleware/validation');
        
        class UserController {
          async createUser(req, res) {
            try {
              const userData = req.body;
              const user = new User(userData);
              await user.save();
              res.status(201).json(user.toJSON());
            } catch (error) {
              res.status(400).json({ error: error.message });
            }
          }
          
          async getUser(req, res) {
            try {
              const user = await User.findById(req.params.id);
              if (!user) {
                return res.status(404).json({ error: 'User not found' });
              }
              res.json(user.toJSON());
            } catch (error) {
              res.status(500).json({ error: error.message });
            }
          }
        }
        
        module.exports = UserController;
      
      routes: |
        // Generated User Routes
        const express = require('express');
        const UserController = require('../controllers/UserController');
        const { authenticate, authorize } = require('../middleware/auth');
        const { validateUser } = require('../middleware/validation');
        
        const router = express.Router();
        const userController = new UserController();
        
        router.post('/users', 
          authenticate,
          validateUser,
          userController.createUser
        );
        
        router.get('/users/:id',
          authenticate,
          userController.getUser
        );
        
        module.exports = router;
      
      tests: |
        // Generated User Tests
        const request = require('supertest');
        const app = require('../app');
        const User = require('../models/User');
        
        describe('User API', () => {
          beforeEach(async () => {
            await User.deleteMany({});
          });
          
          describe('POST /users', () => {
            it('should create a new user', async () => {
              const userData = {
                email: 'test@example.com',
                name: 'Test User',
                password: 'securepassword123'
              };
              
              const response = await request(app)
                .post('/users')
                .send(userData)
                .expect(201);
                
              expect(response.body.email).toBe(userData.email);
              expect(response.body.name).toBe(userData.name);
              expect(response.body.password).toBeUndefined();
            });
          });
        });
  
  # React Component Implementation
  react_component_example:
    feature: "Product Catalog Component"
    technology_stack: ["React", "TypeScript", "Material-UI"]
    
    generated_component: |
      // Generated ProductCatalog Component
      import React, { useState, useEffect } from 'react';
      import {
        Grid,
        Card,
        CardContent,
        CardMedia,
        Typography,
        TextField,
        Select,
        MenuItem,
        Pagination
      } from '@mui/material';
      import { Product } from '../types/Product';
      import { useProducts } from '../hooks/useProducts';
      
      interface ProductCatalogProps {
        category?: string;
        onProductSelect?: (product: Product) => void;
      }
      
      /**
       * ProductCatalog component displays a paginated grid of products
       * with search and filtering capabilities.
       */
      export const ProductCatalog: React.FC<ProductCatalogProps> = ({
        category,
        onProductSelect
      }) => {
        const [searchTerm, setSearchTerm] = useState('');
        const [sortBy, setSortBy] = useState('name');
        const [page, setPage] = useState(1);
        const itemsPerPage = 12;
        
        const { 
          products, 
          loading, 
          error, 
          totalCount 
        } = useProducts({
          search: searchTerm,
          category,
          sortBy,
          page,
          limit: itemsPerPage
        });
        
        const handleProductClick = (product: Product) => {
          onProductSelect?.(product);
        };
        
        const totalPages = Math.ceil(totalCount / itemsPerPage);
        
        if (loading) return <div>Loading products...</div>;
        if (error) return <div>Error loading products: {error.message}</div>;
        
        return (
          <div className="product-catalog">
            <div className="catalog-controls">
              <TextField
                label="Search products"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                fullWidth
                margin="normal"
              />
              <Select
                value={sortBy}
                onChange={(e) => setSortBy(e.target.value)}
                label="Sort by"
              >
                <MenuItem value="name">Name</MenuItem>
                <MenuItem value="price">Price</MenuItem>
                <MenuItem value="rating">Rating</MenuItem>
              </Select>
            </div>
            
            <Grid container spacing={3}>
              {products.map((product) => (
                <Grid item xs={12} sm={6} md={4} key={product.id}>
                  <Card 
                    className="product-card"
                    onClick={() => handleProductClick(product)}
                    style={{ cursor: 'pointer' }}
                  >
                    <CardMedia
                      component="img"
                      height="200"
                      image={product.imageUrl}
                      alt={product.name}
                    />
                    <CardContent>
                      <Typography variant="h6" component="h3">
                        {product.name}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        ${product.price.toFixed(2)}
                      </Typography>
                      <Typography variant="body2">
                        Rating: {product.rating}/5
                      </Typography>
                    </CardContent>
                  </Card>
                </Grid>
              ))}
            </Grid>
            
            <Pagination
              count={totalPages}
              page={page}
              onChange={(event, newPage) => setPage(newPage)}
              style={{ marginTop: '2rem', display: 'flex', justifyContent: 'center' }}
            />
          </div>
        );
      };

# CLI Usage Examples
cli_usage: |
  # Initialize implementation phase
  hugai lifecycle start implementation --architecture design-specs.yaml
  
  # Generate code modules
  hugai implement generate --component UserService --pattern repository --output src/services/
  
  # Create framework scaffolding
  hugai scaffold create --framework express-api --database mongodb --output backend/
  
  # Perform automated refactoring
  hugai refactor --target legacy-code/ --patterns modern-js --dry-run
  
  # Generate documentation
  hugai docs generate --source src/ --api-only --output docs/api/
  
  # Run quality checks
  hugai quality check --source src/ --fix-auto --report quality-report.html
  
  # Execute implementation checkpoint
  hugai checkpoint run pre-merge-review --pr 123 --reviewers team-leads
  
  # Monitor implementation metrics
  hugai metrics implementation --period last-week --output metrics.json