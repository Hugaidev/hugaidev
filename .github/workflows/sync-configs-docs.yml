name: Sync Configurations and Documentation

on:
  push:
    paths:
      - 'config/**/*.yaml'
      - 'config/**/*.yml'
      - 'config/templates/**/*'
      - 'config/sync-automation.py'
  pull_request:
    paths:
      - 'config/**/*.yaml'
      - 'config/**/*.yml'
      - 'config/templates/**/*'
  schedule:
    # Run daily at 2 AM UTC to catch any missed syncs
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      mode:
        description: 'Sync mode'
        required: false
        default: 'full'
        type: choice
        options:
          - full
          - agents
          - lifecycle
          - tools
          - llms
      dry_run:
        description: 'Dry run (show changes without applying)'
        required: false
        default: false
        type: boolean

jobs:
  sync-docs:
    name: Synchronize Configuration Documentation
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      pull-requests: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        pip install -r config/requirements.txt
    
    - name: Create sync templates
      run: |
        cd config
        python sync-automation.py --setup-templates
    
    - name: Validate configurations
      run: |
        cd config
        python validate-config.py
    
    - name: Sync configurations to documentation
      id: sync
      run: |
        cd config
        
        # Determine sync mode
        MODE="${{ github.event.inputs.mode || 'full' }}"
        DRY_RUN="${{ github.event.inputs.dry_run || 'false' }}"
        
        # Build sync command
        SYNC_CMD="python sync-automation.py --mode $MODE"
        
        if [ "$DRY_RUN" = "true" ]; then
          SYNC_CMD="$SYNC_CMD --dry-run"
        fi
        
        # Run sync and capture output
        echo "Running: $SYNC_CMD"
        $SYNC_CMD | tee sync-output.log
        
        # Check if any files were changed
        if [ "$DRY_RUN" = "false" ]; then
          if git diff --quiet; then
            echo "changes_made=false" >> $GITHUB_OUTPUT
          else
            echo "changes_made=true" >> $GITHUB_OUTPUT
          fi
        else
          echo "changes_made=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Upload sync logs
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: sync-logs
        path: |
          config/sync-output.log
          config/sync.log
        retention-days: 30
    
    - name: Commit and push changes
      if: steps.sync.outputs.changes_made == 'true' && github.event_name != 'pull_request'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Add generated documentation
        git add docs/
        
        # Create commit message
        CHANGED_CONFIGS=$(git diff --cached --name-only config/ | grep -E '\.(yaml|yml)$' | head -5 | tr '\n' ', ' | sed 's/,$//')
        
        if [ -n "$CHANGED_CONFIGS" ]; then
          git commit -m "docs: sync configuration changes for $CHANGED_CONFIGS

Automatically generated documentation from configuration changes.

ü§ñ Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>" || echo "No changes to commit"
          
          git push origin ${{ github.ref_name }}
        fi
    
    - name: Create pull request comment
      if: github.event_name == 'pull_request' && steps.sync.outputs.changes_made == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          let syncOutput = '';
          try {
            syncOutput = fs.readFileSync('config/sync-output.log', 'utf8');
          } catch (error) {
            syncOutput = 'Sync log not available';
          }
          
          const comment = `## üìÑ Configuration Documentation Sync
          
          The configuration changes in this PR will result in automatic documentation updates.
          
          ### Sync Results:
          \`\`\`
          ${syncOutput}
          \`\`\`
          
          The documentation will be automatically synchronized when this PR is merged.
          
          ü§ñ Generated by sync-automation workflow`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
    
    - name: Check for sync conflicts
      if: failure()
      run: |
        echo "## ‚ùå Synchronization Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The configuration-documentation synchronization encountered errors." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Possible causes:" >> $GITHUB_STEP_SUMMARY
        echo "- Configuration validation errors" >> $GITHUB_STEP_SUMMARY
        echo "- Template rendering issues" >> $GITHUB_STEP_SUMMARY
        echo "- File permission problems" >> $GITHUB_STEP_SUMMARY
        echo "- Schema validation failures" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Check the sync logs in the artifacts" >> $GITHUB_STEP_SUMMARY
        echo "2. Validate configurations manually: \`python config/validate-config.py\`" >> $GITHUB_STEP_SUMMARY
        echo "3. Run sync manually: \`python config/sync-automation.py --dry-run\`" >> $GITHUB_STEP_SUMMARY

  validate-generated-docs:
    name: Validate Generated Documentation
    needs: sync-docs
    runs-on: ubuntu-latest
    if: always() && needs.sync-docs.outputs.changes_made == 'true'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install MkDocs dependencies
      run: |
        pip install -r requirements.txt
    
    - name: Validate documentation build
      run: |
        # Test main documentation build
        mkdocs build -f mkdocs.yml --strict
        
        # Test configuration documentation build
        mkdocs build -f mkdocs-config.yml --strict
        
        echo "‚úÖ Documentation builds successfully" >> $GITHUB_STEP_SUMMARY
    
    - name: Check for broken links
      run: |
        # Simple link validation for generated docs
        find docs/ -name "*.md" -exec grep -l "](.*)" {} \; | while read file; do
          echo "Checking links in: $file"
          # Extract relative links and check if files exist
          grep -o "](\..*)" "$file" | sed 's/](\.\///' | sed 's/)//' | while read link; do
            if [ ! -f "$link" ] && [ ! -d "$link" ]; then
              echo "‚ö†Ô∏è Potential broken link in $file: $link"
            fi
          done
        done